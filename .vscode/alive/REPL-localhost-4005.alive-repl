
;;; Metodos seletores

(defun no-estado (no)
  "Obtem o estado do nó"
  (car no))
;; teste: (no-estado (no-teste))
;; resultado: (2 2)

(defun no-profundidade (no)
  "Obtem a profundidade do nó"
  (car (cdr no)))
;; teste: (no-profundidade (no-teste))
;; resultado: 0

(defun no-pai (no)
  "Obtem a profundidade do nó"
  (car (cdr (cdr no))))
;; teste: (no-pai (no-teste))
;; resultado: NIL

;; teste: (sucessores (no-teste) (operadores) 'bfs)
;; resultado: (((0 2) 1 ((2 2) 0 NIL)) ((2 0) 1 ((2 2) 0 NIL)) ((3 2) 1 ((2 2) 0 NIL)) ((2 5) 1 ((2 2) 0 NIL)) ((0 4) 1 ((2 2) 0 NIL)) ((3 1) 1 ((2 2) 0 NIL)))
;; teste: (sucessores (no-teste) (operadores) 'dfs 2)
;; resultado: (((0 2) 1 ((2 2) 0 NIL)) ((2 0) 1 ((2 2) 0 NIL)) ((3 2) 1 ((2 2) 0 NIL)) ((2 5) 1 ((2 2) 0 NIL)) ((0 4) 1 ((2 2) 0 NIL)) ((3 1) 1 ((2 2) 0 NIL)))


(defun abertos-bfs (abertos sucessores)
  "Método BFS de inserção dos sucessores na lista de abertos"
  (append abertos sucessores))

(defun abertos-dfs (abertos sucessores)
  "Método DFS de inserção dos sucessores na lista de abertos"
  (append sucessores abertos))

(defun no-objetivo (objetivo lista)
  "Procura por um nó solução numa lista e devolve"
  (cond
   ((null lista) nil)
   ((funcall objetivo (car lista)) (car lista))
   (t (no-objetivo objetivo (cdr lista)))))

(defun no-repetido (no lista)
  "Verifica se um no com o mesmo estado existe numa lista e devolve a lista começando nesse no"
  (member no lista :test (lambda (a b) (and (equal (no-estado a) (no-estado b))))))



;; '( ((1 1) 0 nil)  ((2 1) 1 (() 0 nil))  ((1 2) 1 (() 0 nil)) ((3 1) 2 ((2 1) 1 (() 0 nil))) ((2 2) 2 ((2 1) 1 (() 0 nil))) ((1 3) 2 ((1 2) 1 (() 0 nil))) )


;; Utils BFS

(defun nos-nao-repetidos (nos lista)
  "Devolve a lista de nos sem os com estado igual na lista fornecida"
  (remove nil (mapcar (lambda (no)
                        (cond
                         ((no-repetido no lista) nil)
                         (t no))) nos)))

;;; Algoritmos
;; procura na largura
;; teste: (bfs (no-teste) 'no-solucaop 'sucessores (operadores) nil nil)
;; resultado: ((3 1) 1 ((2 2) 0 NIL))

(defun bfs (no objetivo sucessores operadores &optional abertos fechados (numero-nos-gerados 0) (numero-nos-expandidos 0))
  "Algoritmo de procura em largura implementado recursivamente"
  (cond
   ((and (null abertos) (null fechados)) (bfs no objetivo sucessores operadores (list no) nil))
   ((null abertos) nil)
   (t
    (let* ((n (car abertos))
           (sucessores-n (funcall sucessores n operadores))
           (m (no-objetivo objetivo sucessores-n)))
      (cond
       (m (criar-resultado m (+ numero-nos-gerados (length sucessores-n)) (1+ numero-nos-expandidos)))
       (t (bfs no objetivo sucessores operadores
               (abertos-bfs (cdr abertos) (nos-nao-repetidos sucessores-n (append (cdr abertos) fechados)))
               (append fechados (list n)) (1+ numero-nos-gerados) (+ numero-nos-expandidos (length sucessores-n)))))))))

; (defun bfs (no objetivo sucessores operadores)
;   "Algoritmo de procura em largura implementado sequencialmente"
;   (let (
;     (abertos (list no))
;     (fechados nil)
;     (numero-nos-gerados 0)
;     (numero-nos-expandidos 0)
;     (n nil)
;     (sucessores-n nil)
;     (sucessores-nao-repetidos nil)
;     (m nil))
;     (loop
;       (when (null abertos) (return (list
;                                       nil
;                                       (* (/ numero-nos-gerados numero-nos-expandidos) 1.0)
;                                       numero-nos-gerados
;                                       numero-nos-expandidos
;                                       (* (/ (no-profundidade m) numero-nos-gerados) 1.0))))
;       (setq n (car abertos))
;       (setq sucessores-n (funcall sucessores n operadores))
;       (setq numero-nos-expandidos (1+ numero-nos-expandidos))
;       (setq numero-nos-gerados (+ numero-nos-gerados (length sucessores-n)))
;       (setq sucessores-nao-repetidos (nos-nao-repetidos sucessores-n (append (cdr abertos) fechados)))
;       (setq m (no-objetivo objetivo sucessores-nao-repetidos))
;       (when m (return (criar-resultado m numero-nos-gerados numero-nos-expandidos)))
;       (setq abertos (abertos-bfs (cdr abertos) sucessores-nao-repetidos))
;       (setq fechados (append fechados (list n)))
;     )
;   )
; )

(defun criar-resultado (no numero-nos-gerados numero-nos-expandidos)
  (list 
    no
    (* (/ numero-nos-gerados numero-nos-expandidos) 1.0)
    numero-nos-gerados
    numero-nos-expandidos
    (* (/ (no-profundidade no) numero-nos-gerados) 1.0))
)


; (defun teste () 
;   (let (
;     (a 1)
;     (b 2))
;     (loop
;       (setq a (1+ a))
;       (if (= (mod a 2) 1 ) (setq b (1+ b)))
;       (if (= b 10) (return (list a b)))
;     )
;   )
; )


;; Utils DFS

(defun remover-subarvore (raiz lista)
  (labels ((pertence-a-subarvore (no)
              (cond
               ((null no) nil)
               ((equal (no-pai no) raiz) t)
               (t (pertence-a-subarvore (no-pai no))))))
    (cond
     ((null (car lista)) nil)
     ((or (equal (car lista) raiz) (pertence-a-subarvore (car lista))) (cons nil (remover-subarvore raiz (cdr lista))))
     (t (cons (car lista) (remover-subarvore raiz (cdr lista)))))))

(defun remover-subarvores (a-remover lista)
  (cond
   ((null (car a-remover)) lista)
   (t (remover-subarvores (cdr a-remover) (remove nil (remover-subarvore (car a-remover) lista))))))

(defun dfs-adicionar-sucessores (sucessores fechados abertos)

  (let* ((sucessores-nao-abertos (remove nil (mapcar (lambda (n)
                                                       (cond
                                                        ((no-repetido n abertos) nil)
                                                        (t n))) sucessores)))
         (sucessores-repetidos-fechados (mapcar (lambda (n)
                                                  (let ((fechado-repetido (car (no-repetido n fechados))))
                                                    (cond
                                                     ((null fechado-repetido) (list 'manter n nil))
                                                     ((> (no-profundidade fechado-repetido) (no-profundidade n)) (list 'substituir n fechado-repetido))
                                                     (t (list 'discartar n fechado-repetido))))) sucessores-nao-abertos))
         (sucessores-validos (remove nil (mapcar (lambda (r)
                                                   (cond
                                                    ((or (equal 'manter (first r)) (equal 'substituir (first r))) (second r))
                                                    (t nil))) sucessores-repetidos-fechados)))
         (fechados-a-remover (remove nil (mapcar (lambda (r)
                                                   (cond
                                                    ((equal 'substituir (first r)) (third r))
                                                    (t nil))) sucessores-repetidos-fechados)))
         (fechados-novos (remover-subarvores fechados-a-remover fechados))
         (abertos-novos (abertos-dfs abertos sucessores-validos)))
    (list abertos-novos fechados-novos)))

;; procura na profundidade
;; teste: (dfs (no-teste) 'no-solucaop 'sucessores (operadores) 10)
;; resultado: ((3 1) 1 ((2 2) 0 NIL))

(defun dfs (no objetivo sucessores operadores profundidade &optional abertos fechados (numero-nos-gerados 0) (numero-nos-expandidos 0) )
  (cond
   ((and (null abertos) (null fechados))
    (dfs no objetivo sucessores operadores profundidade (list no) nil))
   ((null abertos) nil)
   ((= (no-profundidade (car abertos)) profundidade) (dfs no objetivo sucessores operadores profundidade (cdr abertos) (append fechados (list (car abertos)))))
   (t
    (let* ((n (car abertos))
           (sucessores-n (funcall sucessores n operadores))
           (m (no-objetivo objetivo sucessores-n)))
      (cond
       (m (criar-resultado m (+ numero-nos-gerados (length sucessores-n)) (1+ numero-nos-expandidos)))
       (t
        (let ((abertos-fechados-novos (dfs-adicionar-sucessores sucessores-n (append fechados (list n)) (cdr abertos))))
          (dfs no objetivo sucessores operadores profundidade (first abertos-fechados-novos) (second abertos-fechados-novos)
            (1+ numero-nos-gerados) (+ numero-nos-expandidos (length sucessores-n))))))))))

;; A*


(defun insere (e p L)
    "insere um elemento e na posição p de uma lista"
    (cond
        ((zerop p) (append (list e) L))
        ((null L) nil)
        (t (cons (car L) (insere e (1- p) (cdr L))))
    )
)

(defun procura-binaria (n L-ord &optional baixo alto)
  "devolve a posição numa lista ordenada (L-ord) em que n (valor numerico) deve ser colocado"
    (cond
        ((or (null baixo) (null alto)) (procura-binaria n L-ord 0 (1- (length L-ord))))
        ((< alto baixo) baixo)
        (t (let* (
            (mid (floor (/(+ baixo alto) 2)))
            (valor-mid (nth mid L-ord)))
            (cond
                ((> valor-mid n) (procura-binaria n L-ord baixo (1- mid)))
                ((< valor-mid n) (procura-binaria n L-ord (1+ mid) alto))
                (t mid)
            )
            ))
    )
)

(defun remove-from-list (l index &optional (i 0))
  "remove da lista l o elemento de indice index, devolvendo uma lista de dimensão (1- (length l))"
  (cond 
      ((= i index) (cdr l))
      (t (cons (car l) (remove-from-list (cdr l) index (1+ i))))
  )
)

; (defun a*-adicionar-sucessores (sucessores abertos f-abertos fechados f-fechados)
;   ()

; )

(defun merge-ordenado-f (elementos f-elementos lista f-lista)
  (cond 
    ((null elementos) (list lista f-lista))
    (t (let
      ((posicao (procura-binaria (car f-elementos) f-lista)))
      (merge-ordenado-f (cdr elementos) (cdr f-elementos) (insere (car elementos) posicao lista) (insere (car f-elementos) posicao f-lista))
    ))
  )
)

(defun a* (no objetivo sucessores operadores heuristica)
  (labels (
    (recursivo (abertos fechados f-abertos f-fechados &optional (numero-nos-gerados 0) (numero-nos-expandidos 1))
      (cond
        ((null abertos) nil)
        (t
          (let (
            ; (menor-custo (a*-menor-custo abertos f-abertos))
            ; (n (first menor-custo)
              (n (car abertos))
              (f-n (car f-abertos)))
            (cond 
              ((funcall objetivo n) (list 
                                        n
                                        (* (/ numero-nos-gerados numero-nos-expandidos) 1.0)
                                        numero-nos-gerados
                                        numero-nos-expandidos
                                        (* (/ (no-profundidade n) numero-nos-gerados) 1.0)))
              (t
                (let* (
                  ;;(abertos-sem-n (remove-from-list abertos (third menor-custo)))
                  (abertos-sem-n (cdr abertos))
                  ;;(f-abertos-sem-n (remove-from-list f-abertos (third menor-custo)))
                  (f-abertos-sem-n (cdr f-abertos))
                  (sucessores-n (funcall sucessores n operadores))
                  (sucessores-validos (nos-nao-repetidos sucessores-n (append abertos-sem-n fechados)))
                  (f-sucessores (avaliar-nos sucessores-validos heuristica))
                  (merged (merge-ordenado-f sucessores-validos f-sucessores abertos-sem-n f-abertos-sem-n))
                  )
                  (recursivo
                    ;;(append abertos-sem-n sucessores-validos)
                    (first merged)
                    (append fechados (list n))
                    ;;(append f-abertos-sem-n f-sucessores)
                    (second merged)
                    (append f-fechados (list f-n))
                    (+ numero-nos-gerados (length sucessores-n))
                    (+ numero-nos-expandidos 1)
                  )
                )
              )
          ))))
        )
      )

    (recursivo (list no) '() '(0) '())

  )
)

; (defun no-pertence-a-subarvore (no raiz)
;               (cond
;                ((null no) nil)
;                ((equal (no-pai no) raiz) t)
;                (t (pertence-a-subarvore (no-pai no) raiz))))

; (defun no-substituir-parentesco (no antecedente-anterior antecedente-novo)
;   (flet
;     ((substituir-parentesco (parentesco)
;       (cond
;         ((null parentesco) nil)
;         ((equal (car parentesco) antedente-anterior) ())
;       )
;     ))
;   )

; )

; (replace-parent-recursively (ls old-parent new-parent &optional new-list replaced)
;   (cond
;     ((and (null new-list)) nil )
;     (())
;   )
; )

(defun avaliar-nos (nos heuristica)
  "Devolve uma lista de avaliações f com base numa lista de nos e uma funcao heuristica
  em que g(n) é a profundidade do no"
  (mapcar (lambda (no) (+ (no-profundidade no) (funcall heuristica (no-estado no)))) nos)
)

(defun a*-menor-custo (abertos f-abertos &optional (menor-no nil) (menor-f nil) (index nil) (i 0))
  "Recebendo uma lista de nos abertos e uma lista de custos f correspondente
  devolve uma lista com o primeiro nó de custo mais baixo, o seu custo f e a
  sua posição nas listas"
  (cond
    ((and (null menor-f) (null menor-no) (null index)) (a*-menor-custo (cdr abertos) (cdr f-abertos) (car abertos) (car f-abertos) i (1+ i)))
    ((null abertos) (list menor-no menor-f index))
    (t 
      (cond
        ((< (car f-abertos) menor-f) (a*-menor-custo (cdr abertos) (cdr f-abertos) (car abertos) (car f-abertos) i (1+ i)))
        (t (a*-menor-custo (cdr abertos) (cdr f-abertos) menor-no menor-f index (1+ i)))
      )
    )
  )
)

A*-MENOR-CUSTO

CL-USER> 
;; Utils

(defun eliminar-duplicados (L)
  (cond ((null L) L)
        ((member (car L) (cdr L) :test #'equal)
         (eliminar-duplicados (cdr L)))
        (t (cons (car L) (eliminar-duplicados (cdr L))))))

;;; Blockus
;;; variaveis de teste e operadores

(defun tabuleiro-vazio () 
    '(
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0))
)

; (defun tabuleiro-problema () 
;     '(
;       (0 0 0 0 2 2 2 2 2 2 2 2 2 2)
;       (0 0 0 0 2 2 2 2 2 2 2 2 2 2)
;       (0 0 0 0 0 0 2 2 2 2 2 2 2 2)
;       (0 0 0 0 0 0 2 2 2 2 2 2 2 2)
;       (2 2 0 0 0 0 0 0 2 2 2 2 2 2)
;       (2 2 0 0 0 0 0 0 2 2 2 2 2 2)
;       (2 2 2 2 0 0 0 0 0 0 2 2 2 2)
;       (2 2 2 2 0 0 0 0 0 0 2 2 2 2)
;       (2 2 2 2 2 2 0 0 0 0 0 0 2 2)
;       (2 2 2 2 2 2 0 0 0 0 0 0 2 2)
;       (2 2 2 2 2 2 2 2 0 0 0 0 0 0)
;       (2 2 2 2 2 2 2 2 0 0 0 0 0 0)
;       (2 2 2 2 2 2 2 2 2 2 0 0 0 0)
;       (2 2 2 2 2 2 2 2 2 2 0 0 0 0))
; )


;; (defun tabuleiro-problema () 
;;     '(
;;       (0 0 0 0 0 0 0 2 2 2 2 2 2 2)
;;       (0 0 0 0 0 0 0 2 2 2 2 2 2 2)
;;       (0 0 0 0 0 0 0 2 2 2 2 2 2 2)
;;       (0 0 0 0 0 0 0 2 2 2 2 2 2 2)
;;       (0 0 0 0 0 0 0 2 2 2 2 2 2 2)
;;       (0 0 0 0 0 0 0 2 2 2 2 2 2 2)
;;       (0 0 0 0 0 0 0 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2))
;; )

(defun tabuleiro-problema () 
    '(
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
      (2 2 2 2 2 2 2 2 2 2 2 2 2 2))
)

;; (defun tabuleiro-problema () 
;;     '(
;;       (0 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 0 2 0 0 0 0 0 0 2 0 0 0 2)
;;       (2 0 0 2 0 0 0 0 0 0 2 0 0 2)
;;       (2 0 0 0 2 0 0 0 0 0 0 2 0 2)
;;       (2 0 0 0 0 2 0 0 0 0 0 0 2 2)
;;       (2 0 0 0 0 0 2 0 0 0 0 0 0 2)
;;       (2 0 0 0 0 0 0 2 0 0 0 0 0 2)
;;       (2 0 0 0 0 0 0 0 2 0 0 0 0 2)
;;       (2 0 0 0 0 0 0 0 0 2 0 0 0 2)
;;       (2 0 2 0 0 0 0 0 0 0 2 0 0 2)
;;       (2 2 0 0 0 0 0 0 0 0 0 2 0 2)
;;       (2 0 0 2 0 0 0 0 0 0 0 0 2 2)
;;       (2 0 0 0 2 0 0 0 0 0 0 0 0 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2))
;; )

;; (defun tabuleiro-problema () 
;;     '(
;;       (0 0 0 0 2 2 2 2 2 2 2 2 2 2)
;;       (0 0 0 0 2 2 2 2 2 2 2 2 2 2)
;;       (0 0 0 0 2 2 2 2 2 2 2 2 2 2)
;;       (0 0 0 0 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2))
;; )

; (defun tabuleiro-problema () 
;     '(
;       (0 0 2 0 0 0 0 0 0 2 2 2 2 2)
;       (0 0 0 2 0 0 0 0 0 2 2 2 2 2)
;       (0 0 0 0 2 0 0 0 0 2 2 2 2 2)
;       (0 0 0 0 0 2 0 0 0 2 2 2 2 2)
;       (0 0 0 0 0 0 2 0 0 2 2 2 2 2)
;       (0 0 0 0 0 0 0 2 0 2 2 2 2 2)
;       (0 0 0 0 0 0 0 0 2 2 2 2 2 2)
;       (0 0 0 0 0 0 0 0 0 2 2 2 2 2)
;       (0 0 0 0 0 0 0 0 0 2 2 2 2 2)
;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2)
;       (2 2 2 2 2 2 2 2 2 2 2 2 2 2))
; )

(defun tabuleiro-teste () 
    '(
      (1 1 0 0 1 0 0 0 0 0 0 0 0 0)
      (1 1 0 0 1 1 0 0 0 0 0 0 0 0)
      (0 0 1 1 0 1 0 0 0 0 0 0 0 0)
      (0 1 1 0 1 0 0 0 1 1 0 0 0 0)
      (0 0 0 0 0 1 0 1 1 0 0 0 0 0)
      (0 0 0 0 0 1 1 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 1 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0)
      (0 0 0 0 0 0 0 0 0 0 0 0 0 0))
)



(defun no-teste ()
  "Define um no teste de Blockus em que o tabuleiro é vazio, a mao tem a quantidade de pecas inicial, profundidade=0 e pai=NIL"
  (list (list (tabuleiro-teste) '(10 10 15)) 0 nil))

(defun no-problema ()
  "Define um no teste de Blockus em que o tabuleiro é um problema, a mao tem a quantidade de pecas inicial, profundidade=0 e pai=NIL"
  (list (list (tabuleiro-problema) '(10 10 15)) 0 nil))

(defun no-vazio ()
  "Define um no teste de Blockus em que o tabuleiro é vazio, a mao tem a quantidade de pecas inicial, profundidade=0 e pai=NIL"
  (list (list (tabuleiro-vazio) '(10 10 15)) 0 nil))

(defun obter-vizinhanca (tabuleiro x y)
    "Obtem uma matriz 3x3 que representa a vizinhança de uma célula no tabuleiro
    Representa espaços fora do tabuleiro com o valor -1"
    (labels (
        (recursive (tabuleiro i)
            (cond 
                ((null tabuleiro) nil)
                ((and (listp (car tabuleiro)) (> (abs (- i y)) 1)) (cons nil (recursive (cdr tabuleiro) (1+ i))))
                ((and (listp (car tabuleiro)) (<= (abs (- i y)) 1)) (cons  (recursive (car tabuleiro) 0) (recursive (cdr tabuleiro) (1+ i))))
                ((null (car tabuleiro)) nil)
                (t 
                    (cond
                        ((<= (abs (- i x)) 1) (cons (car tabuleiro) (recursive (cdr tabuleiro) (1+ i))))
                        (t (cons nil (recursive (cdr tabuleiro) (1+ i))))
                    )
                )
            )
        )
    ) 
    (let* 
        (
            (obtidos (mapcar (lambda (linha) (remove nil linha)) (remove nil (recursive tabuleiro 0) )))
            (obtidos-colunas-corrigidas
                (cond 
                    ((= (length (car obtidos)) 2)
                        (cond
                            ((= x 0) (mapcar (lambda (linha)
                                (cons -1 linha)
                            ) obtidos))
                            (t (mapcar (lambda (linha) 
                                (append linha '(-1))
                            ) obtidos))
                        )
                    )
                    (t obtidos)
                )
            )
            (obtidos-linhas-corrigidas
                (cond
                    ((= (length obtidos-colunas-corrigidas) 2) 
                        (cond
                            ((= y 0) (cons '(-1 -1 -1) obtidos-colunas-corrigidas))
                            (t (append obtidos-colunas-corrigidas '((-1 -1 -1))))
                        )
                    )
                    (t obtidos-colunas-corrigidas)
                )
            )
        )
        obtidos-linhas-corrigidas
    )
    ) 
)

(defun espacos-validos (tabuleiro)
    "Procura espaços validos para jogar no tabuleiro
    Devolve lista de listas com par de coordenadas e lista de direções diagonais de contacto
    (sup-esq, sup-dir, inf-esq, inf-dir)"
    (labels
        (
            (recursive (_tabuleiro x y)
                (cond
                    ((null _tabuleiro) nil)
                    ((listp (car _tabuleiro)) (append  (recursive (car _tabuleiro) 0 y) (recursive (cdr _tabuleiro) 0 (1+ y))))
                    ((null (car _tabuleiro)) nil)
                    (t 
                        (cond 
                            ((/= (car _tabuleiro) 0) (append nil (recursive (cdr _tabuleiro) (1+ x) y)))
                            (t 
                                (let*
                                    (
                                        (vizinhanca (obter-vizinhanca tabuleiro x y))
                                        (decisao (and 
                                            (not (or 
                                                (= (second (first vizinhanca)) 1)
                                                (= (first (second vizinhanca)) 1)
                                                (= (third (second vizinhanca)) 1)
                                                (= (second (third vizinhanca)) 1)
                                                ))
                                            (or
                                                (= (first (first vizinhanca)) 1)
                                                (= (third (first vizinhanca)) 1)
                                                (= (first (third vizinhanca)) 1)
                                                (= (third (third vizinhanca)) 1)
                                            )
                                            ))
                                        (direcoes-de-contato
                                            (remove nil (cons (if (= (first (first vizinhanca)) 1) 'sup-esq nil) 
                                                (cons (if (= (third (first vizinhanca)) 1) 'sup-dir nil) 
                                                    (cons (if (= (first (third vizinhanca)) 1) 'inf-esq nil) 
                                                        (cons (if (= (third (third vizinhanca)) 1) 'inf-dir nil) nil)))))
                                        )
                                    ) 
                                    (append (if decisao (list (list (list x y) direcoes-de-contato)) nil) (recursive (cdr _tabuleiro) (1+ x) y))
                                )
                            )
                        )
                    
                    )
                )
            )
        )
        (cond
            ((tabuleiro-vaziop tabuleiro) '(((0 0) (sup-esq))))
            (t (recursive tabuleiro 0 0))
        )
        
    )
)

(defun tabuleiro-vaziop (tabuleiro)
    (cond
        ((null tabuleiro) t)
        ((listp (car tabuleiro)) (and (tabuleiro-vaziop (car tabuleiro)) (tabuleiro-vaziop (cdr tabuleiro))))
        ((/= (car tabuleiro) 1) (and t (tabuleiro-vaziop (cdr tabuleiro))))
        (t nil)
    )
)

(defun peca-c-h ()
    "Peça C horizontal descrita como uma matriz 3x2 e uma lista de 4 deslocações
    cada deslocação é descrita com uma lista de direcões diagonais de contato e um offset em x e y
    da forma da peça relativamente a posicao no tabuleiro"
    '(
        (
            (0 1 1)
            (1 1 0)
        )
        (
            ((sup-esq) (-1 0))
            ((sup-dir inf-dir) (-2 0))
            ((inf-dir) (-1 -1))
            ((inf-esq sup-esq) (0 -1))
        )
    )
)

(defun peca-c-v ()
    "Peça C vertical descrita como uma matriz 2x3 e uma lista de 4 deslocações
    cada deslocação é descrita com uma lista de direcões diagonais de contato e um offset em x e y
    da forma da peça relativamente a posicao no tabuleiro"
    '(
        (
            (1 0)
            (1 1)
            (0 1)
        )
        (
            ((sup-dir) (-1 -1))
            ((inf-dir inf-esq) (-1 -2))
            ((inf-esq) (0 -1))
            ((sup-esq sup-dir) (0 0))
        )
    )
)

(defun peca-a ()
    "Peça A descrita como uma matriz 1x1 e uma lista de 1 deslocações
    cada deslocação é descrita com uma lista de direcões diagonais de contato e um offset em x e y
    da forma da peça relativamente a posicao no tabuleiro"
    '(
        (
            (1)
        )
        (
            ((sup-dir inf-dir inf-esq sup-esq) (0 0))
        )
    )
)

(defun peca-b ()
    "Peça A descrita como uma matriz 1x1 e uma lista de 4 deslocações
    cada deslocação é descrita com uma lista de direcões diagonais de contato e um offset em x e y
    da forma da peça relativamente a posicao no tabuleiro"
    '(
        (
            (1 1)
            (1 1)
        )
        (
            ((sup-dir) (-1 0))
            ((inf-dir) (-1 -1))
            ((inf-esq) (0 -1))
            ((sup-esq) (0 0))
        )
    )
)

(defun operadores ()
    (list 'peca-a  'peca-b 'peca-c-h 'peca-c-v)
)


(defun deslocacoes-peca (peca)
    (car (cdr peca))
)

(defun potenciais-colocacoes-com-peca ( posicoes peca)
    (eliminar-duplicados (apply #'append (mapcar (lambda (posicao)
             (remove nil (potenciais-colocacoes  posicao (deslocacoes-peca peca)))
        )
     posicoes)))
)

(defun potenciais-colocacoes (posicao deslocacoes)
    (cond
        ((null deslocacoes) nil)
        ((lista-contem-todos (first (car deslocacoes)) (second posicao)) (let 
            (
                (x (+ (first (first posicao)) (first (second (car deslocacoes)))))
                (y (+ (second (first posicao)) (second (second (car deslocacoes)))))
            )
            (cond
                ((or (< x 0) (< y 0)) (cons nil (potenciais-colocacoes posicao (cdr deslocacoes))))
                (t (cons (list x y) (potenciais-colocacoes posicao (cdr deslocacoes))))
            )
        ))
        (t (cons nil (potenciais-colocacoes posicao (cdr deslocacoes))))
    )
)

(defun lista-contem-todos (lista elementos)
    (cond
        ((null elementos) t)
        ((member (car elementos) lista) (and t (lista-contem-todos  lista (cdr elementos))))
        (t nil)
    )
)

(defun potenciais-colocacoes-por-peca (estado operadores)
    (let
        (
            (posicoes-validas (espacos-validos (first estado)))
        )
        (mapcar (lambda (operador)
            (cond
                ((tem-peca operador (second estado)) (list operador (potenciais-colocacoes-com-peca posicoes-validas (funcall operador))))
                (t nil)            
            )
            
        ) operadores)
    )
)

(defun tem-peca (peca mao)
    (cond
        ((equal peca 'peca-a) (> (first mao) 0))
        ((equal peca 'peca-b) (> (second mao) 0))
        ((or (equal peca 'peca-c-h) (equal peca 'peca-c-v)) (> (third mao) 0))
        (t nil)
    )
)


(defun peca-casas-ocupadas (x y peca)
  (labels
    (
      (recursivo (matriz-peca i j)
        (cond
          ((null (car matriz-peca)) nil)
          ((listp (car matriz-peca)) (append (recursivo (car matriz-peca) 0 j) (recursivo (cdr matriz-peca) 0 (1+ j))))
          (t 
            (cond
              ((= (car matriz-peca) 1) (cons (list (+ x i) (+ y j)) (recursivo (cdr matriz-peca) (1+ i) j)))
              (t (cons nil (recursivo (cdr matriz-peca) (1+ i) j)))
            )
          )
        )
      )
    )
    (remove nil (recursivo (first peca) 0 0))
  )
)

(defun linha (idx tabuleiro)
  (nth idx tabuleiro))

(defun coluna (idx tabuleiro)
  (labels ((coluna-rec ( row )
              (cond ((null (nth row tabuleiro)) nil)
                    (t (cons (nth idx (nth row tabuleiro)) (coluna-rec (1+ row)))))))
    (coluna-rec 0)))

(defun celula (row col tabuleiro)
  (nth col (nth row tabuleiro)))

(defun casa-vaziap (col row tabuleiro)
  (and (< row 14) (< col 14) (= (celula row col tabuleiro) 0)))

(defun verifica-casas-vazias (tabuleiro pairs)
  (mapcar (lambda (pair) (apply #'casa-vaziap (append pair (list tabuleiro)))) pairs))

(defun substituir-posicao (idx line &optional (value 1))
  (labels ((recursive (current)
              (cond ((null (nth current line)) nil)
                    ((= current idx) (cons value (recursive (1+ current))))
                    (t (cons (nth current line) (recursive (1+ current)))))))
    (recursive 0))
)

(defun substituir (row col tabuleiro &optional (value 1))
  (labels ((recursive (current)
              (cond ((null (nth current tabuleiro)) nil)
                    ((= current row) (cons (substituir-posicao col (nth current tabuleiro) value) (recursive (1+ current))))
                    (t (cons (nth current tabuleiro) (recursive (1+ current)))))))
    (recursive 0))
)

(defun valida-casas (tabuleiro casas)
    (cond
        ((null casas) t)
        ((or (> (first (car casas)) 13) (> (second (car casas)) 13)
            (< (first (car casas)) 0) (< (second (car casas)) 0)
        ) nil)
        (t 
            (let ((vizinhanca (obter-vizinhanca tabuleiro (first (car casas)) (second (car casas)))))
                (and
                    (and (= (second (second vizinhanca)) 0)
                        (not (or 
                            (= (second (first vizinhanca)) 1)
                            (= (first (second vizinhanca)) 1)
                            (= (third (second vizinhanca)) 1)
                            (= (second (third vizinhanca)) 1)
                        ))
                    )
                (valida-casas tabuleiro (cdr casas)) )
            )
        )
    )
)

(defun list-0-to-n (n)
    (cond 
        ((< n 0) nil)
        (t (append (list-0-to-n (1- n)) (list n))) 
    )
)

(defun remove-from-list (l index &optional (i 0))
    (cond 
        ((= i index) (cdr l))
        (t (cons (car l) (remove-from-list (cdr l) index (1+ i))))
    )
)

(defun shuffle-list (l &optional (shuffled-list nil) (indexes nil) (init nil))
    (cond
        ((null init) (shuffle-list l shuffled-list (list-0-to-n (1- (length l))) t ))
        ((null indexes) shuffled-list)
        (t
            (let* ((random-n (random (length indexes)))
                    (random-index (nth random-n indexes)))

                (shuffle-list l (cons (nth random-index l) shuffled-list) (remove-from-list indexes random-n) init)        
            ) 
        )
    )
)

(defun sucessores (no operadores)
    (shuffle-list (apply #'append (mapcar (lambda (peca-colocacoes)  
        (remove nil (mapcar (lambda (colocacao)
            (let ((casas-ocupadas (peca-casas-ocupadas (first colocacao) (second colocacao) (funcall (first peca-colocacoes)))))
                (cond 
                    ((valida-casas (first (no-estado no)) casas-ocupadas)
                        (list
                            (list
                                (ocupar-casas (first (no-estado no)) casas-ocupadas)
                                (atualizar-mao (second (no-estado no)) (first peca-colocacoes)))
                            (1+ (no-profundidade no))
                            no))
                    (t nil)
                )
            )
        ) (second peca-colocacoes)))
    ) (potenciais-colocacoes-por-peca (no-estado no) operadores ))))
)

(defun ha-jogadas-validas (no)
    (eval (cons 'or  (apply #'append (mapcar (lambda (peca-colocacoes)  
        (mapcar (lambda (colocacao)
            (let ((casas-ocupadas (peca-casas-ocupadas (first colocacao) (second colocacao) (funcall (first peca-colocacoes)))))
                (valida-casas (first (no-estado no)) casas-ocupadas)
                ;;casas-ocupadas
            )
        ) (second peca-colocacoes))
    ) (potenciais-colocacoes-por-peca (no-estado no) (operadores) )))))
)

(defun atualizar-mao (mao peca-jogada)
    (cond
        ((equal peca-jogada 'peca-a) (list (1- (first mao)) (second mao) (third mao)))
        ((equal peca-jogada 'peca-b) (list (first mao) (1- (second mao)) (third mao)))
        ((or (equal peca-jogada 'peca-c-h) (equal peca-jogada 'peca-c-v)) (list (first mao) (second mao) (1- (third mao))))
    )
)


(defun ocupar-casas (tabuleiro casas)
    (cond
        ((null casas) tabuleiro)
        (t (ocupar-casas (substituir (second (car casas)) (first (car casas)) tabuleiro 1) (cdr casas)))
    )
)


;;; Construtor
(defun cria-no (estado &optional (g 0) (pai nil))
  (list estado g pai))


;;; Funcoes auxiliares da procura
;;; predicado no-solucaop que verifica se um estado e final
(defun no-solucaop (no minimo-casas-preenchidas)
  "Determina se um nó é solução"
  (cond
    ((>= (contar-casas-preenchidas (first (no-estado no))) minimo-casas-preenchidas)
        (cond
            ((= (apply #'+ (second (no-estado no))) 0) t)
            ((not (ha-jogadas-validas no)) t)
            (t nil)))
    (t nil)
  )
)

(defun criar-funcao-objetivo (minimo-casas-preenchidas)
    (lambda (no) (funcall #'no-solucaop no minimo-casas-preenchidas))
)

(defun criar-funcao-heuristica-base (minimo-casas-a-preencher)
    (lambda (estado) (funcall #'heuristica-base estado minimo-casas-a-preencher))
)

(defun criar-funcao-heuristica-original (minimo-casas-a-preencher)
    (lambda (estado) (funcall #'heuristica-original estado minimo-casas-a-preencher))
)

(defun heuristica-base (estado minimo-casas-a-preencher)
    (- minimo-casas-a-preencher (contar-casas-preenchidas (first estado)))
)

(defun heuristica-original (estado minimo-casas-a-preencher)
    (+ (- minimo-casas-a-preencher (contar-casas-preenchidas (first estado))) (contar-casas-vazias-nao-sozinhas (first estado)))
)

(defun heuristica-original2 (estado)
    (contar-casas-vazias-nao-sozinhas (first estado))
)

(defun contar-casas-vazias-nao-sozinhas (tabuleiro) 
    (labels
        ((recursivo (x y) 
            (cond
                ((> y 13) 0)
                ((< x 14) (cond ((= (celula y x tabuleiro) 0)
                    (let ((vizinhanca (obter-vizinhanca tabuleiro x y)))
                        (if (or 
                                (= (second (first vizinhanca)) 0)
                                (= (first (second vizinhanca)) 0)
                                (= (third (second vizinhanca)) 0)
                                (= (second (third vizinhanca)) 0))
                            (+ 1 (recursivo (1+ x) y))
                            (recursivo (1+ x) y)
                        )
                    )) (t (recursivo (1+ x) y))
                ))
                (t (recursivo 0 (1+ y)))
            )
        ))
        (recursivo 0 0)
    )
)



(defun contar-casas-preenchidas (tabuleiro) 
    (cond 
        ((null tabuleiro) 0)
        ((listp (car tabuleiro)) (+ (contar-casas-preenchidas (car tabuleiro))
                                    (contar-casas-preenchidas (cdr tabuleiro))))
        (t
            (cond 
                ((= (car tabuleiro) 1) (+ 1 (contar-casas-preenchidas (cdr tabuleiro))))
                (t (contar-casas-preenchidas(cdr tabuleiro)))
            )
        )
    )
)


;; teste: (no-solucaop (no-teste))
;; resultado: NIL

WARNING: redefining COMMON-LISP-USER::REMOVE-FROM-LIST in DEFUN

CONTAR-CASAS-PREENCHIDAS

CL-USER> 
(defun menu-inicial ()
  (progn
   (format t " ~% _____________________________________")
   (format t " ~%|                                     |")
   (format t " ~%|           JOGO DO BLOKUS            |")
   (format t " ~%|                                     |")
   (format t " ~%|              1 - Jogar              |")
   (format t " ~%|              0 - Sair               |")
   (format t " ~%|_____________________________________|")
   (format t " ~%                                       ")
   (format t " ~%-> Opção: ")))


;; Seleção do algoritmo
(defun selecionar-algoritmo ()
  (progn
   (format t " ~% _____________________________________")
   (format t " ~%|                                     |")
   (format t " ~%|           JOGO DO BLOKUS            |")
   (format t " ~%|                                     |")
   (format t " ~%|       Escolha o algoritmo:          |")
   (format t " ~%|                                     |")
   (format t " ~%|       1 - Breadth-First Search      |")
   (format t " ~%|       2 - Depth-First Search        |")
   (format t " ~%|       3 - A*                        |")
   (format t " ~%|       0 - Voltar                    |")
   (format t " ~%|                                     |")
   (format t " ~%|_____________________________________|")
   (format t " ~%                                       ")
   (format t " ~%-> Opção: ")))

(defun selecionar-heuristica ()
  (progn
   (format t " ~% _____________________________________")
   (format t " ~%|                                     |")
   (format t " ~%|           JOGO DO BLOKUS            |")
   (format t " ~%|                                     |")
   (format t " ~%|       Escolha a heuristica          |")
   (format t " ~%|                                     |")
   (format t " ~%|       1 - Heuristica base           |")
   (format t " ~%|       2 - Heuristica original       |")
   (format t " ~%|       0 - Voltar                    |")
   (format t " ~%|                                     |")
   (format t " ~%|_____________________________________|")
   (format t " ~%                                       ")
   (format t " ~%-> Opção: ")))

;; Iniciar o jogo
(defun start ()
  (progn (menu-inicial)
         (let ((option (read)))
           (cond
            ((eq option '1) (start-alg))
            ((eq option '0) (format t "Até à próxima!"))
            (T (progn (format t "Opção inválida!") (start)))))))

;; Corre os algoritmos
(defun start-alg ()
  (progn (selecionar-algoritmo)
         (let ((option (read)))
           (cond
            ((eq option '1)
             ;BFS 
            )
            ((eq option '2)
             ;DFS
            )
            ((eq option '3)
             (start-heuristica))
            ((eq option '0) (start))
            (T (progn (format t "Opção inválida!") (start-alg)))))))

(defun efetuar-procura (fprocura)
  (let* ((tempo-inicio (tempo-atual))
         (resultado (eval fprocura))
         (tempo-final (tempo-atual))
         (tempo-total (- tempo-final)))
    (progn)))

(defun diferenca-tempo (tempo-inicial tempo-final)
  (let* ((tempo-inicial-segundos (+ (* (first tempo-inicial) 3600) (* (second tempo-inicial) 60) (third tempo-inicial)))
    (tempo-final-segundos (+ (* (first tempo-final) 3600) (* (second tempo-final) 60) (third tempo-final))))
  (- tempo-final-segundos tempo-inicial-segundos))
)

(defun mostrar-estados (nos profundidade)
    (cond
        ((null nos) nil)
        ((/= (no-profundidade  (car nos)) profundidade) (mostrar-estados (cdr nos) profundidade))
        (t (progn
            (mostrar-tabuleiro (car (car (car nos))))
            (terpri)
            (mostrar-estados (cdr nos) profundidade)
        ))
    )
)

(defun mostrar-tabuleiro (tabuleiro)
    (format t "~{~{~a~^ ~}~%~}" (tabuleiro-letras tabuleiro))
)

(defun mostrar-solucao(no)
    (cond 
        ((null no) nil)
        (t (progn (mostrar-solucao (no-pai no)) (mostrar-no no)))
    )
)

(defun mostrar-resultado(resultado)
    (progn 
        (mostrar-solucao (car resultado))
        (mostrar-estatisticas (cdr resultado))
    )

)

(defun mostrar-estatisticas (estatisticas)
    (progn
        (format t "Factor de ramificação média: ~a" (first estatisticas))
        (terpri)
        (format t "Número de nós gerados: ~a" (second estatisticas))
        (terpri)
        (format t "Número de nós expandidos: ~a" (third estatisticas))
        (terpri)
        (format t "Penetrância: ~a" (fourth estatisticas))
    )
)

(defun mostrar-no (no)
    (progn
        (mostrar-tabuleiro (first (no-estado no)))
        (format t "Peças disponiveis: ~a" (second (no-estado no)))
        (terpri)
        (terpri)
    )
)

(defun tabuleiro-letras (tabuleiro)
    (mapcar (lambda (row)
        (mapcar (lambda (cel) 
            (cond
                ((= cel 2) '?)
                ((= cel 1) '?)
                (t '_)
            )
        ) row)
    ) tabuleiro)
)

(defun start-heuristica ()
  (progn (selecionar-heuristica)
         (let ((option (read)))
           (cond
            ((eq option '1) nil)
            ((eq option '2) nil)
            ((eq option '0) (format t "Até à próxima!"))
            (T (progn (format t "Opção inválida!") (start)))))))

;; Devolve o path para o ficheiro problemas.dat
(defun diretorio-problemas ()
  (make-pathname :host "c" :directory '(:absolute "lisp") :name "problemas" :type "dat"))

;; Retorna os tabuleiros do ficheiro problemas.dat
(defun ler-tabuleiros ()
  (with-open-file (file (diretorio-problemas) :if-does-not-exist nil)
    (do ((result nil (cons next result)) (next (read file nil 'eof) (read file nil 'eof)))
      ((equal next 'eof) (reverse result)))))

;; Mostra o menu com os tabuleiros 
(defun menu-tabuleiro (&optional (i 1) (problemas (ler-tabuleiros)))
  (if (null problemas)
      (progn
       (format t " ~%|         0 - Voltar                  |")
       (format t " ~%|                                     |")
       (format t " ~%|_____________________________________|")
       (format t " ~%                                       ")
       (format t " ~%-> Opção: "))
      (progn
       (cond
        ((= i 1)
         (progn
          (format t " ~% _____________________________________")
          (format t " ~%|                                     |")
          (format t " ~%|           JOGO DO BLOKUS            |")
          (format t " ~%|                                     |")
          (format t " ~%|         Escolha o tabuleiro:        |")
          (format t " ~%|                                     |"))) (t nil))
       (format t " ~%|         ~a : tabuleiro ~a           |" i i)
       (menu-tabuleiro (+ i 1) (cdr problemas)))))

(defun select-tabuleiro (menu)
  (progn (menu-tabuleiro)
         (let ((option (read)))
           (cond
            ((eq option '0) (funcall menu))
            ((not (numberp option))
             (progn
              (format t "Insira uma opção válida")
              (select-tabuleiro menu)))
            (T (let ((lista-tabuleiros (ler-tabuleiros)))
                 (cond
                  ((eq option 0) (format t "Até à próxima!"))
                  (t (if (or (> option (length lista-tabuleiros) (< option 0)))
                         (progn
                          (format t "Insira uma opção válida")
                          (select-tabuleiro menu))
                         (list option (nth (1- option) lista-tabuleiros)))))))))))

(defun directory-resultados-file ()
  (make-pathname :host "c" :directory '(:absolute "lisp") :name "resultados" :type "dat"))

(defun escrever-ficheiro-resultados (sol)
  (let* ((tempo-inicial (car sol))
         (alg-solucao (car (cdr sol)))
         (tempo-fim (car (cdr (cdr sol))))
         (alg (car (cdr (cdr (cdr sol)))))
         (moves (car (cdr (cdr (cdr (cdr (cdr sol)))))))
         (goal (car (cdr (cdr (cdr (cdr (cdr sol))))))))
    (with-open-file (file (directory-resultados-file) :direction :output :if-exists :append :if-does-not-exist :create)
      (progn
       (format file "~%* ------------------------- *")
       (format file "~%~t> Algoritmo escolhido: ~a " alg)
       (format file "~%~t> Hora de Início: ~a:~a:~a" (car tempo-inicial) (car (cdr tempo-inicial)) (car (cdr (cdr tempo-inicial))))
       (format file "~%~t> Hora de Fim: ~a:~a:~a" (car tempo-fim) (car (cdr tempo-fim)) (car (cdr (cdr tempo-fim))))
       (format file "~%~t> Número de nós gerados: ~a" (+ (car (cdr alg-solucao)) (car (cdr (cdr alg-solucao)))))
       (format file "~%~t> Número de nós expandidos: ~a" (car (cdr (cdr alg-solucao))))
       (format file "~%~t> Profundidade máxima: ~a" moves)
       (format file "~%~t> Objetivo pretendido: ~a" goal)
       (format file "~%~t> Penetrância: ~F" (penetrancia alg-solucao))
       (format file "~%~t> Pontos totais: ~a" (no-g (car alg-solucao)))
       (display-jogadas (car alg-solucao) (car (cdr alg-solucao)) (car (cdr (cdr alg-solucao))))))))

(defun tempo-atual ()
  "Retorna o tempo atual com o formato (h m s)"
  (multiple-value-bind (s m h) (get-decoded-time)
    (list h m s)))

; in: DEFUN EFETUAR-PROCURA
;     (LET* ((TEMPO-INICIO (TEMPO-ATUAL))
;            (RESULTADO (EVAL FPROCURA))
;            (TEMPO-FINAL (TEMPO-ATUAL))
;            (TEMPO-TOTAL (- TEMPO-FINAL)))
;       (PROGN))
; 
; caught STYLE-WARNING:
;   The variable TEMPO-INICIO is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable RESULTADO is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable TEMPO-TOTAL is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions

; in: DEFUN SELECT-TABULEIRO
;     (> OPTION (LENGTH LISTA-TABULEIROS) (< OPTION 0))
; --> 
; --> (LAMBDA (#:G2 #:G1 #:G0) (DECLARE (TYPE REAL #:G2 #:G1 #:G0)) (IF (> #:G2 #:G1) (IF (> #:G1 #:G0) T NIL) NIL)) 
; --> SB-C::%FUNCALL 
; ==>
;   (#'(LAMBDA (G2 G1 G0) IN SELECT-TABULEIRO) OPTION (LENGTH LISTA-TABULEIROS)
;    (< OPTION 0))
; 
; caught WARNING:
;   Derived type of
;     T and NIL
;   in
;     (< OPTION 0)
;   is
;     (VALUES BOOLEAN &OPTIONAL),
;   conflicting with their asserted type
;     REAL.
;   See also:
;     The SBCL Manual, Node "Handling of Types"
; 
; compilation unit finished
;   caught 1 WARNING condition

; in: DEFUN ESCREVER-FICHEIRO-RESULTADOS
;     (DISPLAY-JOGADAS (CAR ALG-SOLUCAO) (CAR (CDR ALG-SOLUCAO))
;      (CAR (CDR (CDR ALG-SOLUCAO))))
; 
; caught STYLE-WARNING:
;   undefined function: COMMON-LISP-USER::DISPLAY-JOGADAS

;     (NO-G (CAR ALG-SOLUCAO))
; 
; caught STYLE-WARNING:
;   undefined function: COMMON-LISP-USER::NO-G

;     (PENETRANCIA ALG-SOLUCAO)
; 
; caught STYLE-WARNING:
;   undefined function: COMMON-LISP-USER::PENETRANCIA
; 
; compilation unit finished
;   Undefined functions:
;     DISPLAY-JOGADAS NO-G PENETRANCIA
;   caught 3 STYLE-WARNING conditions

TEMPO-ATUAL

CL-USER> (mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 10 15)

? ? _ _ _ _ _ _ _ _ _ _ _ _
? ? _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 9 15)

? ? _ _ _ _ _ _ _ _ _ _ _ _
? ? _ _ _ _ _ _ _ _ _ _ _ _
_ _ ? _ _ _ _ _ _ _ _ _ _ _
_ _ ? ? _ _ _ _ _ _ _ _ _ _
_ _ _ ? _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 9 14)

? ? _ ? _ _ _ _ _ _ _ _ _ _
? ? _ ? ? _ _ _ _ _ _ _ _ _
_ _ ? _ ? _ _ _ _ _ _ _ _ _
_ _ ? ? _ _ _ _ _ _ _ _ _ _
_ _ _ ? _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 9 13)

? ? _ ? _ _ _ _ _ _ _ _ _ _
? ? _ ? ? _ _ _ _ _ _ _ _ _
_ _ ? _ ? _ _ _ _ _ _ _ _ _
_ _ ? ? _ _ _ _ _ _ _ _ _ _
_ ? _ ? _ _ _ _ _ _ _ _ _ _
_ ? ? _ _ _ _ _ _ _ _ _ _ _
_ _ ? _ _ _ _ _ _ _ _ _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 9 12)

? ? _ ? _ _ _ _ _ _ _ _ _ _
? ? _ ? ? _ _ _ _ _ _ _ _ _
_ _ ? _ ? _ _ _ _ _ _ _ _ _
_ _ ? ? _ _ _ _ _ _ _ _ _ _
_ ? _ ? _ ? ? _ _ _ _ _ _ _
_ ? ? _ ? ? _ _ _ _ _ _ _ _
_ _ ? _ _ _ _ _ _ _ _ _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 9 11)

? ? _ ? _ _ _ _ _ _ _ _ _ _
? ? _ ? ? _ _ _ _ _ _ _ _ _
_ _ ? _ ? _ _ _ _ _ _ _ _ _
_ _ ? ? _ _ _ _ _ _ _ _ _ _
_ ? _ ? _ ? ? _ _ _ _ _ _ _
_ ? ? _ ? ? _ ? ? _ _ _ _ _
_ _ ? _ _ _ ? ? _ _ _ _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 9 10)

? ? _ ? _ _ _ _ _ _ _ _ _ _
? ? _ ? ? _ _ _ _ _ _ _ _ _
_ _ ? _ ? _ _ _ _ _ _ _ _ _
_ _ ? ? _ _ _ _ _ _ _ _ _ _
_ ? _ ? _ ? ? _ _ _ _ _ _ _
_ ? ? _ ? ? _ ? ? _ ? ? _ _
_ _ ? _ _ _ ? ? _ ? ? _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 9 9)

? ? _ ? _ _ _ _ _ _ _ _ _ _
? ? _ ? ? _ _ _ _ _ _ _ _ _
_ _ ? _ ? _ _ _ ? _ _ _ _ _
_ _ ? ? _ _ _ _ ? ? _ _ _ _
_ ? _ ? _ ? ? _ _ ? _ _ _ _
_ ? ? _ ? ? _ ? ? _ ? ? _ _
_ _ ? _ _ _ ? ? _ ? ? _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 9 8)

? ? _ ? _ _ _ _ _ ? _ _ _ _
? ? _ ? ? _ _ _ _ ? ? _ _ _
_ _ ? _ ? _ _ _ ? _ ? _ _ _
_ _ ? ? _ _ _ _ ? ? _ _ _ _
_ ? _ ? _ ? ? _ _ ? _ _ _ _
_ ? ? _ ? ? _ ? ? _ ? ? _ _
_ _ ? _ _ _ ? ? _ ? ? _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 9 7)

? ? _ ? _ _ _ _ _ ? _ _ _ _
? ? _ ? ? _ _ _ _ ? ? _ _ _
_ _ ? _ ? _ _ _ ? _ ? _ _ _
_ _ ? ? _ _ _ _ ? ? _ _ ? ?
_ ? _ ? _ ? ? _ _ ? _ _ ? ?
_ ? ? _ ? ? _ ? ? _ ? ? _ _
_ _ ? _ _ _ ? ? _ ? ? _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 8 7)

? ? _ ? _ _ ? ? _ ? _ _ _ _
? ? _ ? ? _ ? ? _ ? ? _ _ _
_ _ ? _ ? _ _ _ ? _ ? _ _ _
_ _ ? ? _ _ _ _ ? ? _ _ ? ?
_ ? _ ? _ ? ? _ _ ? _ _ ? ?
_ ? ? _ ? ? _ ? ? _ ? ? _ _
_ _ ? _ _ _ ? ? _ ? ? _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (10 7 7)

? ? _ ? _ _ ? ? _ ? _ ? _ _
? ? _ ? ? _ ? ? _ ? ? _ _ _
_ _ ? _ ? _ _ _ ? _ ? _ _ _
_ _ ? ? _ _ _ _ ? ? _ _ ? ?
_ ? _ ? _ ? ? _ _ ? _ _ ? ?
_ ? ? _ ? ? _ ? ? _ ? ? _ _
_ _ ? _ _ _ ? ? _ ? ? _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (9 7 7)

? ? _ ? _ _ ? ? _ ? _ ? _ _
? ? _ ? ? _ ? ? _ ? ? _ _ _
_ _ ? _ ? _ _ _ ? _ ? _ _ _
_ _ ? ? _ _ _ _ ? ? _ _ ? ?
_ ? _ ? _ ? ? _ _ ? _ _ ? ?
_ ? ? _ ? ? _ ? ? _ ? ? _ _
? _ ? _ _ _ ? ? _ ? ? _ _ _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (8 7 7)

? ? _ ? _ _ ? ? _ ? _ ? _ _
? ? _ ? ? _ ? ? _ ? ? _ _ _
_ _ ? _ ? _ _ _ ? _ ? _ _ _
_ _ ? ? _ _ _ _ ? ? _ _ ? ?
_ ? _ ? _ ? ? _ _ ? _ _ ? ?
_ ? ? _ ? ? _ ? ? _ ? ? _ _
? _ ? _ _ _ ? ? _ ? ? _ ? _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (7 7 7)

? ? _ ? _ _ ? ? _ ? _ ? _ _
? ? _ ? ? _ ? ? _ ? ? _ _ _
_ _ ? _ ? _ _ _ ? _ ? _ _ _
? _ ? ? _ _ _ _ ? ? _ _ ? ?
_ ? _ ? _ ? ? _ _ ? _ _ ? ?
_ ? ? _ ? ? _ ? ? _ ? ? _ _
? _ ? _ _ _ ? ? _ ? ? _ ? _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (6 7 7)

? ? _ ? _ _ ? ? _ ? _ ? _ _
? ? _ ? ? _ ? ? _ ? ? _ ? _
_ _ ? _ ? _ _ _ ? _ ? _ _ _
? _ ? ? _ _ _ _ ? ? _ _ ? ?
_ ? _ ? _ ? ? _ _ ? _ _ ? ?
_ ? ? _ ? ? _ ? ? _ ? ? _ _
? _ ? _ _ _ ? ? _ ? ? _ ? _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (5 7 7)

? ? _ ? _ _ ? ? _ ? _ ? _ ?
? ? _ ? ? _ ? ? _ ? ? _ ? _
_ _ ? _ ? _ _ _ ? _ ? _ _ _
? _ ? ? _ _ _ _ ? ? _ _ ? ?
_ ? _ ? _ ? ? _ _ ? _ _ ? ?
_ ? ? _ ? ? _ ? ? _ ? ? _ _
? _ ? _ _ _ ? ? _ ? ? _ ? _
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
? ? ? ? ? ? ? ? ? ? ? ? ? ?
Peças disponiveis: (4 7 7)

Factor de ramificação média: 8.166667
Número de nós gerados: 147
Número de nós expandidos: 18
Penetrância: 0.11564626
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN

(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 15)

■ _ _ _ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 14)

■ _ _ _ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ _ _ _ _ _ _ _ _ _ _ _
■ _ _ _ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 13)

■ _ _ _ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ ■ ■ _ _ _ _ _ _ _ _ _
■ _ ■ ■ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 12)

■ _ _ _ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ ■ ■ _ _ _ _ _ _ _ _ _
■ _ ■ ■ _ ■ ■ _ _ _ _ _ _ _
■ ■ _ _ ■ ■ _ _ _ _ _ _ _ _
_ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 11)

■ _ _ _ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ ■ ■ _ _ _ _ _ _ _ _ _
■ _ ■ ■ _ ■ ■ _ _ _ _ _ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ _ _ _
_ ■ _ _ _ _ ■ ■ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 10)

■ _ _ _ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ ■ ■ _ _ _ _ _ _ _ _ _
■ _ ■ ■ _ ■ ■ _ _ _ _ _ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ _ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ _ _
_ _ _ _ _ _ _ _ ■ ■ _ _ _ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 9)

■ _ _ _ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ ■ ■ _ _ _ _ _ _ _ _ _
■ _ ■ ■ _ ■ ■ _ _ _ _ _ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ _ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
_ _ _ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 8)

■ _ _ _ _ _ _ _ _ _ _ _ _ _
■ ■ _ _ _ _ _ _ _ _ _ _ _ _
_ ■ _ ■ ■ _ _ _ _ _ ■ _ _ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
_ _ _ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 7)

■ _ _ _ _ _ _ _ _ _ _ ■ _ _
■ ■ _ _ _ _ _ _ _ _ _ ■ ■ _
_ ■ _ ■ ■ _ _ _ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
_ _ _ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 10 6)

■ _ _ _ _ ■ ■ _ _ _ _ ■ _ _
■ ■ _ _ _ ■ ■ _ _ _ _ ■ ■ _
_ ■ _ ■ ■ _ _ _ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
_ _ _ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 9 6)

■ _ _ _ _ ■ ■ _ ■ ■ _ ■ _ _
■ ■ _ _ _ ■ ■ _ ■ ■ _ ■ ■ _
_ ■ _ ■ ■ _ _ _ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
_ _ _ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (10 8 6)

■ _ _ _ _ ■ ■ _ ■ ■ _ ■ _ ■
■ ■ _ _ _ ■ ■ _ ■ ■ _ ■ ■ _
_ ■ _ ■ ■ _ _ _ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
_ _ _ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (9 8 6)

■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ _ ■
■ ■ _ _ _ ■ ■ _ ■ ■ _ ■ ■ _
_ ■ _ ■ ■ _ _ _ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
_ _ _ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (8 8 6)

■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ _ ■
■ ■ _ _ _ ■ ■ _ ■ ■ _ ■ ■ _
_ ■ _ ■ ■ _ _ _ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
■ _ _ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (7 8 6)

■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ _ ■
■ ■ _ _ _ ■ ■ _ ■ ■ _ ■ ■ _
_ ■ _ ■ ■ _ _ _ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
■ _ ■ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (6 8 6)

■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ _ ■
■ ■ _ _ _ ■ ■ _ ■ ■ _ ■ ■ _
_ ■ _ ■ ■ _ _ ■ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ _ _ _ ■ ■ _ ■ ■ _ ■ ■
■ _ ■ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (5 8 6)

■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ _ ■
■ ■ _ _ _ ■ ■ _ ■ ■ _ ■ ■ _
_ ■ _ ■ ■ _ _ ■ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ ■
■ _ ■ _ _ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (4 8 6)

■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ _ ■
■ ■ _ _ _ ■ ■ _ ■ ■ _ ■ ■ _
_ ■ _ ■ ■ _ _ ■ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ _
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ ■
■ _ ■ _ ■ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: 
(3 8 6)

■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ _ ■
■ ■ _ _ _ ■ ■ _ ■ ■ _ ■ ■ _
_ ■ _ ■ ■ _ _ ■ _ _ ■ _ ■ _
■ _ ■ ■ _ ■ ■ _ _ _ ■ ■ _ ■
■ ■ _ _ ■ ■ _ ■ ■ _ _ ■ _ _
_ ■ _ ■ _ _ ■ ■ _ ■ ■ _ ■ ■
■ _ ■ _ ■ _ _ _ ■ ■ _ ■ ■ _
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒
Peças disponiveis: (2 8 6)

Factor de ramificação média: 9.454545
Número de nós gerados: 208
Número de nós expandidos: 22
Penetrância: 0.09134615
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN

WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN

WARNING: redefining COMMON-LISP-USER::TABULEIRO-PROBLEMA in DEFUN

(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 10 15)

■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 9 15)

■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ ■ ■ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 9 14)

■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ ■ ■ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ ■ ■ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 9 13)

■ ■ _ _ _ ■ _ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ ■ ░ ░ ░ ░ ░ ░ ░
_ ■ ■ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ ■ ■ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 9 12)

■ ■ _ _ _ ■ _ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ ■ ░ ░ ░ ░ ░ ░ ░
_ ■ ■ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ ■ ■ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 9 11)

■ ■ _ _ _ ■ _ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ ■ ░ ░ ░ ░ ░ ░ ░
_ ■ ■ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
■ _ _ ■ ■ _ _ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
_ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 9 10)

Factor de ramificação média: 7.285714
Número de nós gerados: 51
Número de nós expandidos: 7
Penetrância: 0.11764706
NIL

CL-USER> (mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 10 15)

■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 9 15)

■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 8 15)

■ ■ _ _ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 8 14)

■ ■ _ _ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 8 13)

■ ■ _ _ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ _ ■ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ ■ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (10 8 12)

■ ■ _ _ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ _ ■ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ ■ _ _ _ _ ■ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (9 8 12)

■ ■ _ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ _ ■ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ ■ _ _ _ _ ■ ░ ░ ░ ░ ░ ░ ░
_ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (8 8 12)

■ ■ _ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ _ ■ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ ■ _ _ _ _ ■ ░ ░ ░ ░ ░ ░ ░
■ _ _ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (7 8 12)

■ ■ _ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ _ ■ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ ■ _ _ _ _ ■ ░ ░ ░ ░ ░ ░ ░
■ _ ■ _ _ _ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (6 8 12)

■ ■ _ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ _ ■ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ ■ _ _ _ _ ■ ░ ░ ░ ░ ░ ░ ░
■ _ ■ _ _ ■ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (5 8 12)

■ ■ _ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ _ ■ ■ _ _ _ ░ ░ ░ ░ ░ ░ ░
■ _ ■ ■ _ ■ ■ ░ ░ ░ ░ ░ ░ ░
■ ■ _ _ ■ ■ _ ░ ░ ░ ░ ░ ░ ░
_ ■ _ ■ _ _ ■ ░ ░ ░ ░ ░ ░ ░
■ _ ■ _ _ ■ _ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░
Peças disponiveis: (4 8 12)

Factor de ramificação média: 5.0833335
Número de nós gerados: 61
Número de nós expandidos: 12
Penetrância: 0.18032786
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN
(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
              : : : : : : :
              : : : : : : :
              : : : : : : :
              : : : : : : :
              : : : : : : :
              : : : : : : :
              : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 15)

#             : : : : : : :
# #           : : : : : : :
  #           : : : : : : :
              : : : : : : :
              : : : : : : :
              : : : : : : :
              : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 14)

#             : : : : : : :
# #           : : : : : : :
  #           : : : : : : :
#             : : : : : : :
# #           : : : : : : :
  #           : : : : : : :
              : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 13)

#             : : : : : : :
# #           : : : : : : :
  #   # #     : : : : : : :
#   # #       : : : : : : :
# #           : : : : : : :
  #           : : : : : : :
              : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 12)

#         #   : : : : : : :
# #       # # : : : : : : :
  #   # #   # : : : : : : :
#   # #       : : : : : : :
# #           : : : : : : :
  #           : : : : : : :
              : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 11)

#         #   : : : : : : :
# #       # # : : : : : : :
  #   # #   # : : : : : : :
#   # #   #   : : : : : : :
# #       # # : : : : : : :
  #         # : : : : : : :
              : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 10)

#         #   : : : : : : :
# #       # # : : : : : : :
  #   # #   # : : : : : : :
#   # #   #   : : : : : : :
# #       # # : : : : : : :
  #   # #   # : : : : : : :
      # #     : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 9 10)

#         #   : : : : : : :
# #       # # : : : : : : :
  #   # #   # : : : : : : :
#   # #   #   : : : : : : :
# #       # # : : : : : : :
  #   # #   # : : : : : : :
#     # #     : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (9 9 10)

#   #     #   : : : : : : :
# #       # # : : : : : : :
  #   # #   # : : : : : : :
#   # #   #   : : : : : : :
# #       # # : : : : : : :
  #   # #   # : : : : : : :
#     # #     : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (8 9 10)

Factor de ramificação média: 5.7777777
Número de nós gerados: 52
Número de nós expandidos: 9
Penetrância: 0.15384616
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN

(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
. . . . . . . : : : : : : :
. . . . . . . : : : : : : :
. . . . . . . : : : : : : :
. . . . . . . : : : : : : :
. . . . . . . : : : : : : :
. . . . . . . : : : : : : :
. . . . . . . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 15)

# . . . . . . : : : : : : :
# # . . . . . : : : : : : :
. # . . . . . : : : : : : :
. . . . . . . : : : : : : :
. . . . . . . : : : : : : :
. . . . . . . : : : : : : :
. . . . . . . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 14)

# . . . . . . : : : : : : :
# # . . . . . : : : : : : :
. # . . . . . : : : : : : :
# . . . . . . : : : : : : :
# # . . . . . : : : : : : :
. # . . . . . : : : : : : :
. . . . . . . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 13)

# . . . . . . : : : : : : :
# # . . . . . : : : : : : :
. # . # # . . : : : : : : :
# . # # . . . : : : : : : :
# # . . . . . : : : : : : :
. # . . . . . : : : : : : :
. . . . . . . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 12)

# . . . . . . : : : : : : :
# # . . . . . : : : : : : :
. # . # # . . : : : : : : :
# . # # . # # : : : : : : :
# # . . # # . : : : : : : :
. # . . . . . : : : : : : :
. . . . . . . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 11)

# . . . . # # : : : : : : :
# # . . . # # : : : : : : :
. # . # # . . : : : : : : :
# . # # . # # : : : : : : :
# # . . # # . : : : : : : :
. # . . . . . : : : : : : :
. . . . . . . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 9 11)

# . # . . # # : : : : : : :
# # . . . # # : : : : : : :
. # . # # . . : : : : : : :
# . # # . # # : : : : : : :
# # . . # # . : : : : : : :
. # . . . . . : : : : : : :
. . . . . . . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (9 9 11)

# . # . . # # : : : : : : :
# # . . . # # : : : : : : :
. # . # # . . : : : : : : :
# . # # . # # : : : : : : :
# # . . # # . : : : : : : :
. # . . . . . : : : : : : :
# . . . . . . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (8 9 11)

# . # . . # # : : : : : : :
# # . . . # # : : : : : : :
. # . # # . . : : : : : : :
# . # # . # # : : : : : : :
# # . . # # . : : : : : : :
. # . . . . # : : : : : : :
# . . . . . . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (7 9 11)

# . # . . # # : : : : : : :
# # . . . # # : : : : : : :
. # . # # . . : : : : : : :
# . # # . # # : : : : : : :
# # . . # # . : : : : : : :
. # . . . . # : : : : : : :
# . . . . # . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (6 9 11)

# . # . . # # : : : : : : :
# # . . . # # : : : : : : :
. # . # # . . : : : : : : :
# . # # . # # : : : : : : :
# # . . # # . : : : : : : :
. # . . . . # : : : : : : :
# . # . . # . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (5 9 11)

# . # . . # # : : : : : : :
# # . . . # # : : : : : : :
. # . # # . . : : : : : : :
# . # # . # # : : : : : : :
# # . . # # . : : : : : : :
. # . # . . # : : : : : : :
# . # . . # . : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (4 9 11)

Factor de ramificação média: 4.75
Número de nós gerados: 57
Número de nós expandidos: 12
Penetrância: 0.19298245
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN

(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
. . . . . . . H H H H H H H
. . . . . . . H H H H H H H
. . . . . . . H H H H H H H
. . . . . . . H H H H H H H
. . . . . . . H H H H H H H
. . . . . . . H H H H H H H
. . . . . . . H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
Peças disponiveis: (10 10 15)

# . . . . . . H H H H H H H
# # . . . . . H H H H H H H
. # . . . . . H H H H H H H
. . . . . . . H H H H H H H
. . . . . . . H H H H H H H
. . . . . . . H H H H H H H
. . . . . . . H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
Peças disponiveis: (10 10 14)

# . . . . . . H H H H H H H
# # . . . . . H H H H H H H
. # . . . . . H H H H H H H
# . . . . . . H H H H H H H
# # . . . . . H H H H H H H
. # . . . . . H H H H H H H
. . . . . . . H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
Peças disponiveis: (10 10 13)

# . . . . . . H H H H H H H
# # . . . . . H H H H H H H
. # . # # . . H H H H H H H
# . # # . . . H H H H H H H
# # . . . . . H H H H H H H
. # . . . . . H H H H H H H
. . . . . . . H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
Peças disponiveis: (10 10 12)

# . . . . # . H H H H H H H
# # . . . # # H H H H H H H
. # . # # . # H H H H H H H
# . # # . . . H H H H H H H
# # . . . . . H H H H H H H
. # . . . . . H H H H H H H
. . . . . . . H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
Peças disponiveis: (10 10 11)

# . . . . # . H H H H H H H
# # . . . # # H H H H H H H
. # . # # . # H H H H H H H
# . # # . # . H H H H H H H
# # . . . # # H H H H H H H
. # . . . . # H H H H H H H
. . . . . . . H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
Peças disponiveis: (10 10 10)

# . . . . # . H H H H H H H
# # . . . # # H H H H H H H
. # . # # . # H H H H H H H
# . # # . # . H H H H H H H
# # . . . # # H H H H H H H
. # . # # . # H H H H H H H
. . . # # . . H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
Peças disponiveis: (10 9 10)

# . # . . # . H H H H H H H
# # . . . # # H H H H H H H
. # . # # . # H H H H H H H
# . # # . # . H H H H H H H
# # . . . # # H H H H H H H
. # . # # . # H H H H H H H
. . . # # . . H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
Peças disponiveis: (9 9 10)

# . # . . # . H H H H H H H
# # . . . # # H H H H H H H
. # . # # . # H H H H H H H
# . # # . # . H H H H H H H
# # . . . # # H H H H H H H
. # . # # . # H H H H H H H
# . . # # . . H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
H H H H H H H H H H H H H H
Peças disponiveis: (8 9 10)

Factor de ramificação média: 5.7777777
Número de nós gerados: 52
Número de nós expandidos: 9
Penetrância: 0.15384616
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN

(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
Peças disponiveis: (10 10 15)

# # . . . . . O O O O O O O
# # . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
Peças disponiveis: (10 9 15)

# # . . . . . O O O O O O O
# # . . . . . O O O O O O O
. . # # . . . O O O O O O O
. # # . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
Peças disponiveis: (10 9 14)

# # . . . . . O O O O O O O
# # . . . . . O O O O O O O
. . # # . . . O O O O O O O
. # # . # # . O O O O O O O
. . . # # . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
Peças disponiveis: (10 9 13)

# # . . . # . O O O O O O O
# # . . . # # O O O O O O O
. . # # . . # O O O O O O O
. # # . # # . O O O O O O O
. . . # # . . O O O O O O O
. . . . . . . O O O O O O O
. . . . . . . O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
Peças disponiveis: (10 9 12)

# # . . . # . O O O O O O O
# # . . . # # O O O O O O O
. . # # . . # O O O O O O O
. # # . # # . O O O O O O O
. . . # # . . O O O O O O O
. . . . . # # O O O O O O O
. . . . # # . O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
Peças disponiveis: (10 9 11)

# # . . . # . O O O O O O O
# # . . . # # O O O O O O O
. . # # . . # O O O O O O O
. # # . # # . O O O O O O O
# . . # # . . O O O O O O O
# # . . . # # O O O O O O O
. # . . # # . O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
O O O O O O O O O O O O O O
Peças disponiveis: (10 9 10)

Factor de ramificação média: 7.285714
Número de nós gerados: 51
Número de nós expandidos: 7
Penetrância: 0.11764706
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN

(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
              . . . . . . .
              . . . . . . .
              . . . . . . .
              . . . . . . .
              . . . . . . .
              . . . . . . .
              . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (10 10 15)

#             . . . . . . .
# #           . . . . . . .
  #           . . . . . . .
              . . . . . . .
              . . . . . . .
              . . . . . . .
              . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (10 10 14)

#             . . . . . . .
# #           . . . . . . .
  #           . . . . . . .
#             . . . . . . .
# #           . . . . . . .
  #           . . . . . . .
              . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (10 10 13)

#             . . . . . . .
# #           . . . . . . .
  #   # #     . . . . . . .
#   # #       . . . . . . .
# #           . . . . . . .
  #           . . . . . . .
              . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (10 10 12)

#             . . . . . . .
# #           . . . . . . .
  #   # #     . . . . . . .
#   # #   # # . . . . . . .
# #     # #   . . . . . . .
  #           . . . . . . .
              . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (10 10 11)

#         # # . . . . . . .
# #       # # . . . . . . .
  #   # #     . . . . . . .
#   # #   # # . . . . . . .
# #     # #   . . . . . . .
  #           . . . . . . .
              . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (10 9 11)

#   #     # # . . . . . . .
# #       # # . . . . . . .
  #   # #     . . . . . . .
#   # #   # # . . . . . . .
# #     # #   . . . . . . .
  #           . . . . . . .
              . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (9 9 11)

#   #     # # . . . . . . .
# #       # # . . . . . . .
  #   # #     . . . . . . .
#   # #   # # . . . . . . .
# #     # #   . . . . . . .
  #         # . . . . . . .
              . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (8 9 11)

#   #     # # . . . . . . .
# #       # # . . . . . . .
  #   # #     . . . . . . .
#   # #   # # . . . . . . .
# #     # #   . . . . . . .
  #         # . . . . . . .
          #   . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (7 9 11)

#   #     # # . . . . . . .
# #       # # . . . . . . .
  #   # #     . . . . . . .
#   # #   # # . . . . . . .
# #     # #   . . . . . . .
  #         # . . . . . . .
#         #   . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (6 9 11)

#   #     # # . . . . . . .
# #       # # . . . . . . .
  #   # #     . . . . . . .
#   # #   # # . . . . . . .
# #     # #   . . . . . . .
  #         # . . . . . . .
#   #     #   . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (5 9 11)

#   #     # # . . . . . . .
# #       # # . . . . . . .
  #   # #     . . . . . . .
#   # #   # # . . . . . . .
# #     # #   . . . . . . .
  #   #     # . . . . . . .
#   #     #   . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
. . . . . . . . . . . . . .
Peças disponiveis: (4 9 11)

Factor de ramificação média: 4.8333335
Número de nós gerados: 58
Número de nós expandidos: 12
Penetrância: 0.18965517
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN

(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
_ _ _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (10 10 15)

# _ _ _ _ _ _ - - - - - - -
# # _ _ _ _ _ - - - - - - -
_ # _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (10 10 14)

# _ _ _ _ _ _ - - - - - - -
# # _ _ _ _ _ - - - - - - -
_ # _ _ _ _ _ - - - - - - -
# _ _ _ _ _ _ - - - - - - -
# # _ _ _ _ _ - - - - - - -
_ # _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (10 10 13)

# _ _ _ _ _ _ - - - - - - -
# # _ _ _ _ _ - - - - - - -
_ # _ # # _ _ - - - - - - -
# _ # # _ _ _ - - - - - - -
# # _ _ _ _ _ - - - - - - -
_ # _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (10 10 12)

# _ _ _ _ _ _ - - - - - - -
# # _ _ _ _ _ - - - - - - -
_ # _ # # _ _ - - - - - - -
# _ # # _ # # - - - - - - -
# # _ _ # # _ - - - - - - -
_ # _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (10 10 11)

# _ _ _ _ # # - - - - - - -
# # _ _ _ # # - - - - - - -
_ # _ # # _ _ - - - - - - -
# _ # # _ # # - - - - - - -
# # _ _ # # _ - - - - - - -
_ # _ _ _ _ _ - - - - - - -
_ _ _ _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (10 9 11)

# _ _ _ _ # # - - - - - - -
# # _ _ _ # # - - - - - - -
_ # _ # # _ _ - - - - - - -
# _ # # _ # # - - - - - - -
# # _ _ # # _ - - - - - - -
_ # _ _ _ _ _ - - - - - - -
# _ _ _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (9 9 11)

# _ _ _ _ # # - - - - - - -
# # _ _ _ # # - - - - - - -
_ # _ # # _ _ - - - - - - -
# _ # # _ # # - - - - - - -
# # _ _ # # _ - - - - - - -
_ # _ _ _ _ _ - - - - - - -
# _ # _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (8 9 11)

# _ _ _ _ # # - - - - - - -
# # _ _ _ # # - - - - - - -
_ # _ # # _ _ - - - - - - -
# _ # # _ # # - - - - - - -
# # _ _ # # _ - - - - - - -
_ # _ _ _ _ # - - - - - - -
# _ # _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (7 9 11)

# _ # _ _ # # - - - - - - -
# # _ _ _ # # - - - - - - -
_ # _ # # _ _ - - - - - - -
# _ # # _ # # - - - - - - -
# # _ _ # # _ - - - - - - -
_ # _ _ _ _ # - - - - - - -
# _ # _ _ _ _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (6 9 11)

# _ # _ _ # # - - - - - - -
# # _ _ _ # # - - - - - - -
_ # _ # # _ _ - - - - - - -
# _ # # _ # # - - - - - - -
# # _ _ # # _ - - - - - - -
_ # _ _ _ _ # - - - - - - -
# _ # _ _ # _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (5 9 11)

# _ # _ _ # # - - - - - - -
# # _ _ _ # # - - - - - - -
_ # _ # # _ _ - - - - - - -
# _ # # _ # # - - - - - - -
# # _ _ # # _ - - - - - - -
_ # _ # _ _ # - - - - - - -
# _ # _ _ # _ - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
- - - - - - - - - - - - - -
Peças disponiveis: (4 9 11)

Factor de ramificação média: 4.75
Número de nós gerados: 57
Número de nós expandidos: 12
Penetrância: 0.19298245
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::TABULEIRO-LETRAS in DEFUN

(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 15)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 14)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 13)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 12)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 9 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (9 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (8 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
# _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (7 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
# _ # _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (6 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
# _ # _ _ # _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (5 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ # _ _ # : : : : : : :
# _ # _ _ # _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (4 9 11)

Factor de ramificação média: 4.9166665
Número de nós gerados: 59
Número de nós expandidos: 12
Penetrância: 0.18644068
NIL

CL-USER> (mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) (criar-funcao-heuristica-base 20)))
(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) (criar-funcao-heuristica-base 20)))
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 15)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 14)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ # # _ _ : : : : : : :
_ _ # # _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 13)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ # # _ _ : : : : : : :
_ _ # # _ # # : : : : : : :
_ _ _ _ # # _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 12)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ # # _ _ : : : : : : :
_ _ # # _ # # : : : : : : :
_ _ _ _ # # _ : : : : : : :
_ _ # # _ _ _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
_ _ # # _ # # : : : : : : :
_ _ _ _ # # _ : : : : : : :
_ _ # # _ _ _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 9 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
_ _ _ _ # # _ : : : : : : :
_ _ # # _ _ _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (9 9 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
_ _ _ _ # # _ : : : : : : :
_ _ # # _ _ _ : : : : : : :
_ # # _ # _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (8 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
_ _ _ _ # # _ : : : : : : :
_ _ # # _ _ _ : : : : : : :
_ # # _ # _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (7 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
_ _ _ _ # # _ : : : : : : :
_ _ # # _ _ # : : : : : : :
_ # # _ # _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (6 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
_ # _ _ # # _ : : : : : : :
_ _ # # _ _ # : : : : : : :
_ # # _ # _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (5 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
_ # _ _ # # _ : : : : : : :
# _ # # _ _ # : : : : : : :
_ # # _ # _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (4 9 11)

Factor de ramificação média: 3.3947368
Número de nós gerados: 258
Número de nós expandidos: 76
Penetrância: 0.04263566
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::CRIAR-NO-INICIAL-BLOCKUS in DEFUN
(indice-no-lista '(1 2) '((2 2) (3 4) (1 2) (5 6)))
(indice-no-lista '(1 2) '((2 2) (3 4) (1 2) (5 6)))
2

CL-USER> 
; in: DEFUN REMOVER-SUBARVORE-F
;     (REMOVER-SUBARVORE RAIZ (CDR LISTA) (CDR F-LISTA) LISTA-NOVA F-LISTA-NOVA)
; 
; caught STYLE-WARNING:
;   The function REMOVER-SUBARVORE is called with five arguments, but wants exactly two.

;     (REMOVER-SUBARVORE RAIZ (CDR LISTA) (CDR F-LISTA)
;                        (APPEND LISTA-NOVA (LIST (CAR LISTA)))
;                        (APPEND F-LISTA-NOVA (LIST (CAR F-LISTA))))
; 
; caught STYLE-WARNING:
;   The function REMOVER-SUBARVORE is called with five arguments, but wants exactly two.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions

WARNING: redefining COMMON-LISP-USER::REMOVER-SUBARVORE-F in DEFUN

WARNING: redefining COMMON-LISP-USER::REMOVER-SUBARVORE-F in DEFUN

WARNING: redefining COMMON-LISP-USER::A* in DEFUN
(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
(mostrar-resultado (a* (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 'heuristica-original2))
Factor de ramificação média: NIL
Número de nós gerados: NIL
Número de nós expandidos: NIL
Penetrância: NIL
NIL

CL-USER> (mostrar-resultado (dfs (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 15))

(mostrar-resultado (dfs (no-problema) (criar-funcao-objetivo 20) 'sucessores (operadores) 15))
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 15)

# # _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 9 15)

# # _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (9 9 15)

# # _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (9 9 14)

# # _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (8 9 14)

# # _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (7 9 14)

# # _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (6 9 14)

# # _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ _ # _ _ _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
# _ # _ _ _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (5 9 14)

# # _ _ _ _ _ : : : : : : :
# # _ _ # _ _ : : : : : : :
_ _ # _ # # _ : : : : : : :
_ # _ # _ # _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
# _ # _ _ _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (5 9 13)

# # _ _ _ _ _ : : : : : : :
# # _ _ # _ # : : : : : : :
_ _ # _ # # _ : : : : : : :
_ # _ # _ # _ : : : : : : :
_ # # _ _ _ _ : : : : : : :
# _ # _ _ _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (4 9 13)

# # _ _ _ _ _ : : : : : : :
# # _ _ # _ # : : : : : : :
_ _ # _ # # _ : : : : : : :
_ # _ # _ # _ : : : : : : :
_ # # _ _ _ # : : : : : : :
# _ # _ _ _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (3 9 13)

# # _ _ _ _ _ : : : : : : :
# # _ _ # _ # : : : : : : :
_ _ # _ # # _ : : : : : : :
_ # _ # _ # _ : : : : : : :
_ # # _ _ _ # : : : : : : :
# _ # _ # _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (2 9 13)

# # _ _ _ # _ : : : : : : :
# # _ _ # _ # : : : : : : :
_ _ # _ # # _ : : : : : : :
_ # _ # _ # _ : : : : : : :
_ # # _ _ _ # : : : : : : :
# _ # _ # _ _ : : : : : : :
_ # _ # _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (1 9 13)

# # _ _ _ # _ : : : : : : :
# # _ _ # _ # : : : : : : :
_ _ # _ # # _ : : : : : : :
_ # _ # _ # _ : : : : : : :
_ # # _ _ _ # : : : : : : :
# _ # _ # _ _ : : : : : : :
_ # _ # _ # _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (0 9 13)

Factor de ramificação média: 0.13207547
Número de nós gerados: 14
Número de nós expandidos: 106
Penetrância: 0.9285714
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::A*-ADICIONAR-SUCESSORES in DEFUN

WARNING: redefining COMMON-LISP-USER::A* in DEFUN

(mostrar-resultado (a* (no-vazio) (criar-funcao-objetivo 72) 'sucessores (operadores) 'heuristica-original2))
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 15)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 14)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 13)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 12)

# _ _ _ _ _ _ : : : : : : :
# # _ _ _ _ _ : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 10 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ _ : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (10 9 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
_ _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (9 9 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
# _ _ _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (8 9 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
# _ # _ _ _ _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (7 9 11)

# _ _ _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
# _ # _ _ # _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (6 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ _ _ _ # : : : : : : :
# _ # _ _ # _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (5 9 11)

# _ # _ _ # # : : : : : : :
# # _ _ _ # # : : : : : : :
_ # _ # # _ _ : : : : : : :
# _ # # _ # # : : : : : : :
# # _ _ # # _ : : : : : : :
_ # _ # _ _ # : : : : : : :
# _ # _ _ # _ : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
: : : : : : : : : : : : : :
Peças disponiveis: (4 9 11)

Factor de ramificação média: 4.9166665
Número de nós gerados: 59
Número de nós expandidos: 12
Penetrância: 0.18644068
NIL

CL-USER> 
(mostrar-resultado (a* (no-vazio) (criar-funcao-objetivo 72) 'sucessores (operadores) 'heuristica-original2))
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 10 15)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 15)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ _ _ _ _ _ _ _
_ _ # # _ _ _ _ _ _ _ _ _ _
_ # # _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 14)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ _ _ _ _ _ _ _
_ _ # # _ _ _ _ _ _ _ _ _ _
_ # # _ # # _ _ _ _ _ _ _ _
_ _ _ # # _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 13)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ _ _ _ _ _ _ _
_ _ # # _ _ _ _ _ _ _ _ _ _
_ # # _ # # _ _ _ _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ _ _ _ _ # # _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 12)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ _ _ _ _ _ _ _
_ _ # # _ _ _ _ _ _ _ _ _ _
_ # # _ # # _ _ _ _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ _ _ _ _ # # _ # # _ _ _ _
_ _ _ _ _ _ _ # # _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 11)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ _ _ _ _ _ _ _
_ _ # # _ _ _ _ _ _ _ _ _ _
_ # # _ # # _ _ _ _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ _ _ _ _ # # _ # # _ _ _ _
_ _ _ _ _ _ _ # # _ # # _ _
_ _ _ _ _ _ _ _ _ # # _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 10)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ _ _ _ _ _ _ _
_ _ # # _ _ _ _ _ _ _ _ _ _
_ # # _ # # _ _ _ _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ _ _ _ _ # # _ # # _ _ _ _
_ _ _ _ _ _ _ # # _ # # _ _
_ _ _ _ _ _ _ _ _ # # _ # #
_ _ _ _ _ _ _ _ _ _ _ # # _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 9)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ _ _ _ _ # # _ # # _ _ _ _
_ _ _ _ _ _ _ # # _ # # _ _
_ _ _ _ _ _ _ _ _ # # _ # #
_ _ _ _ _ _ _ _ _ _ _ # # _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 8)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ _ _ _ _ # # _ # # _ _
_ _ _ _ _ _ _ _ _ # # _ # #
_ _ _ _ _ _ _ _ _ _ _ # # _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 7)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ _ _ _ _ # # _ # #
_ _ _ _ _ _ _ _ _ _ _ # # _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 6)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
_ _ _ _ # # _ _ _ _ _ # # _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 5)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
_ _ _ _ # # _ # # _ _ # # _
_ _ _ _ _ _ # # _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 4)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
_ _ _ _ # # _ # # _ _ # # _
_ _ _ _ _ _ # # _ # # _ _ _
_ _ _ _ _ _ _ _ # # _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 3)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
_ _ _ _ # # _ # # _ _ # # _
_ _ _ _ _ _ # # _ # # _ _ _
_ _ _ _ _ _ _ _ # # _ # # _
_ _ _ _ _ _ _ _ _ _ # # _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
_ _ _ _ _ _ _ _ _ _ _ _ _ _
Peças disponiveis: (10 9 2)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ _ _ _ _
_ _ _ # # _ # # _ _ _ _ _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
_ _ _ _ # # _ # # _ _ # # _
_ _ _ _ _ _ # # _ # # _ _ _
_ _ _ _ _ _ _ _ # # _ # # _
_ _ _ _ _ _ _ _ _ _ # # _ _
_ _ _ _ _ _ _ _ _ _ _ _ # #
_ _ _ _ _ _ _ _ _ _ _ # # _
Peças disponiveis: (10 9 1)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ # # _ _
_ _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
_ _ _ _ # # _ # # _ _ # # _
_ _ _ _ _ _ # # _ # # _ _ _
_ _ _ _ _ _ _ _ # # _ # # _
_ _ _ _ _ _ _ _ _ _ # # _ _
_ _ _ _ _ _ _ _ _ _ _ _ # #
_ _ _ _ _ _ _ _ _ _ _ # # _
Peças disponiveis: (10 8 1)

# # _ _ _ _ _ _ _ _ _ _ _ _
# # _ _ _ _ _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ # # _ _
_ _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
_ _ _ _ # # _ # # _ _ # # _
_ _ _ _ _ _ # # _ # # _ _ _
_ _ _ _ _ _ _ _ # # _ # # _
_ _ _ _ _ _ _ # _ _ # # _ _
_ _ _ _ _ _ _ # # _ _ _ # #
_ _ _ _ _ _ _ _ # _ _ # # _
Peças disponiveis: (10 8 0)

# # _ _ # # _ _ _ _ _ _ _ _
# # _ _ # # _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ # # _ _
_ _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
_ _ _ _ # # _ # # _ _ # # _
_ _ _ _ _ _ # # _ # # _ _ _
_ _ _ _ _ _ _ _ # # _ # # _
_ _ _ _ _ _ _ # _ _ # # _ _
_ _ _ _ _ _ _ # # _ _ _ # #
_ _ _ _ _ _ _ _ # _ _ # # _
Peças disponiveis: 
(10 7 0)

# # _ _ # # _ _ _ _ _ _ _ _
# # _ _ # # _ # _ _ _ _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ # # _ _
_ _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ _ _ _ # # _ # # _ _ _
_ _ _ _ _ _ _ _ # # _ # # _
_ _ _ _ _ _ _ # _ _ # # _ _
_ _ _ _ _ _ _ # # _ _ _ # #
_ _ _ _ _ _ _ _ # _ _ # # _
Peças disponiveis: (10 6 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ # # _ _
_ _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ _ _ _ # # _ # # _ _ _
_ _ _ _ _ _ _ _ # # _ # # _
_ _ _ _ _ _ _ # _ _ # # _ _
_ _ _ _ _ _ _ # # _ _ _ # #
_ _ _ _ _ _ _ _ # _ _ # # _
Peças disponiveis: (10 5 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ # # _ _
_ _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ _ _ _ # # _ # # _ _ _
_ _ _ _ # # _ _ # # _ # # _
_ _ _ _ # # _ # _ _ # # _ _
_ _ _ _ _ _ _ # # _ _ _ # #
_ _ _ _ _ _ _ _ # _ _ # # _
Peças disponiveis: (10 4 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ _ _
_ _ # # _ _ _ # # _ _ _ _ _
_ # # _ # # _ _ # _ # # _ _
_ _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ _ _ _ # # _ # # _ _ _
_ _ _ _ # # _ _ # # _ # # _
_ _ _ _ # # _ # _ _ # # _ _
_ _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ _ _ # _ _ # # _
Peças disponiveis: (10 3 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
_ _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ _ _ _ # # _ # # _ _ _
_ _ _ _ # # _ _ # # _ # # _
_ _ _ _ # # _ # _ _ # # _ _
_ _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ _ _ # _ _ # # _
Peças disponiveis: (10 2 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
_ _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ _ _ _ # # _ # # _ _ #
_ _ _ _ # # _ _ # # _ # # _
_ _ _ _ # # _ # _ _ # # _ _
_ _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ _ _ # _ _ # # _
Peças disponiveis: (9 2 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
# _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ _ _ _ # # _ # # _ _ #
_ _ _ _ # # _ _ # # _ # # _
_ _ _ _ # # _ # _ _ # # _ _
_ _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ _ _ # _ _ # # _
Peças disponiveis: (8 2 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
# _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ _ _ _ # # _ # # _ _ #
_ _ _ _ # # _ _ # # _ # # _
_ _ _ _ # # _ # _ _ # # _ _
_ _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ # _ # _ _ # # _
Peças disponiveis: (7 2 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
# _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ # _ _ # # _ # # _ _ #
_ _ _ _ # # _ _ # # _ # # _
_ _ _ _ # # _ # _ _ # # _ _
_ _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ # _ # _ _ # # _
Peças disponiveis: (6 2 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
# _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ # _ _ # # _ # # _ _ #
_ _ _ _ # # _ _ # # _ # # _
_ # _ _ # # _ # _ _ # # _ _
_ _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ # _ # _ _ # # _
Peças disponiveis: (5 2 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
# _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ # _ _ # # _ # # _ _ #
_ _ _ _ # # _ _ # # _ # # _
_ # _ _ # # _ # _ _ # # _ _
# _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ # _ # _ _ # # _
Peças disponiveis: (4 2 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
# _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ _ _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ # _ _ # # _ # # _ _ #
_ _ # _ # # _ _ # # _ # # _
_ # _ _ # # _ # _ _ # # _ _
# _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ # _ # _ _ # # _
Peças disponiveis: (3 2 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
# _ _ # # _ # # _ _ # # _ _
_ # # _ _ # # _ # # _ _ # _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ # _ _ # # _ # # _ _ #
_ _ # _ # # _ _ # # _ # # _
_ # _ _ # # _ # _ _ # # _ _
# _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ # _ # _ _ # # _
Peças disponiveis: (2 2 0)

# # _ _ # # _ _ _ # # _ _ _
# # _ _ # # _ # _ # # _ # #
_ _ # # _ _ _ # # _ _ _ # #
_ # # _ # # _ _ # _ # # _ _
# _ _ # # _ # # _ _ # # _ #
_ # # _ _ # # _ # # _ _ # _
# # _ # # _ _ # # _ # # _ _
_ _ # # _ # # _ _ # # _ # #
# # _ _ # # _ # # _ _ # # _
# # _ # _ _ # # _ # # _ _ #
_ _ # _ # # _ _ # # _ # # _
_ # _ _ # # _ # _ _ # # _ _
# _ # # _ _ _ # # _ _ _ # #
_ _ # # _ _ # _ # _ _ # # _
Peças disponiveis: (1 2 0)

Factor de ramificação média: 12.571428
Número de nós gerados: 704
Número de nós expandidos: 56
Penetrância: 0.045454547
NIL

CL-USER> 
WARNING: redefining COMMON-LISP-USER::EFETUAR-PROCURA in DEFUN

WARNING: redefining COMMON-LISP-USER::MERGE-ORDENADO-F in DEFUN

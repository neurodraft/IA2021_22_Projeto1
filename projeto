(defun menu-inicial()
  (progn
    (format t " ~% _____________________________________")
    (format t " ~%|                                     |")
    (format t " ~%|           JOGO DO BLOKUS            |")
    (format t " ~%|                                     |")
    (format t " ~%|              1 - Jogar              |")
    (format t " ~%|              0 - Sair               |")
    (format t " ~%|_____________________________________|")
    (format t " ~%                                       ")
    (format t " ~%-> Opção: ")
   )
)


;; Seleção do algoritmo
(defun selecionar-algoritmo ()
  (progn
   (format t " ~% _____________________________________")
   (format t " ~%|                                     |")
   (format t " ~%|           JOGO DO BLOKUS            |")
   (format t " ~%|                                     |")
   (format t " ~%|       Escolha o algoritmo:          |")
   (format t " ~%|                                     |")
   (format t " ~%|       1 - Breadth-First Search      |")
   (format t " ~%|       2 - Depth-First Search        |")
   (format t " ~%|       3 - A*                        |")
   (format t " ~%|       0 - Voltar                    |")
   (format t " ~%|                                     |")
   (format t " ~%|_____________________________________|")
   (format t " ~%                                       ")
   (format t " ~%-> Opção: ") 
  )
)

(defun selecionar-heuristica ()
  (progn
   (format t " ~% _____________________________________")
   (format t " ~%|                                     |")
   (format t " ~%|           JOGO DO BLOKUS            |")
   (format t " ~%|                                     |")
   (format t " ~%|       Escolha a heuristica          |")
   (format t " ~%|                                     |")
   (format t " ~%|       1 - Heuristica base           |")
   (format t " ~%|       2 - Heuristica original       |")
   (format t " ~%|       0 - Voltar                    |")
   (format t " ~%|                                     |")
   (format t " ~%|_____________________________________|")
   (format t " ~%                                       ")
   (format t " ~%-> Opção: ") 
  )
)

;; Iniciar o jogo
(defun start()
  (progn (menu-inicial)
    (let((option (read)))
      (cond
       ((eq option '1) (start-alg))
       ((eq option '0) (format t "Até à próxima!"))
       (T (progn (format t "Opção inválida!") (start)))
      )
     )
   )
)

;; Corre os algoritmos
(defun start-alg()
  (progn (selecionar-algoritmo)
    (let ((option (read)))
      (cond
       ((eq option '1)
        ;BFS 
       )
       ((eq option '2)
        ;DFS
       )
       ((eq option '3)
	(start-heuristica)
	)
       ((eq option '0) (start))
       (T (progn (format t "Opção inválida!") (start-alg)))
      )
    )
  )
)


(defun start-heuristica()
(progn (selecionar-heuristica)
    (let((option (read)))
      (cond
       ((eq option '1) nil)
       ((eq option '2) nil)
       ((eq option '0) (format t "Até à próxima!"))
       (T (progn (format t "Opção inválida!") (start)))
      )
     )
   )
)

;; Devolve o path para o ficheiro problemas.dat
(defun diretorio-problemas()
  (make-pathname :host "c" :directory '(:absolute "lisp") :name "problemas" :type "dat")
)

;; Retorna os tabuleiros do ficheiro problemas.dat
(defun ler-tabuleiros()
  (with-open-file (file (diretorio-problemas) :if-does-not-exist nil)
    (do((result nil (cons next result)) (next (read file nil 'eof) (read file nil 'eof)))
        ((equal next 'eof) (reverse result))
    )
  )
)

;; Mostra o menu com os tabuleiros 
(defun menu-tabuleiro(&optional(i 1) (problemas (ler-tabuleiros)))
  (if (null problemas)
    (progn
      (format t " ~%|         0 - Voltar                  |")
      (format t " ~%|                                     |")
      (format t " ~%|_____________________________________|")
      (format t " ~%                                       ")
      (format t " ~%-> Opção: ")
    )
    (progn
      (cond 
       ((= i 1)
        (progn
          (format t " ~% _____________________________________")
          (format t " ~%|                                     |")
          (format t " ~%|           JOGO DO BLOKUS            |")
          (format t " ~%|                                     |")
          (format t " ~%|         Escolha o tabuleiro:        |")
          (format t " ~%|                                     |")
        )) (t nil))
      (format t " ~%|         ~a : tabuleiro ~a           |" i i)
      (menu-tabuleiro (+ i 1) (cdr problemas))
    )
  )
)

(defun select-tabuleiro(menu)
  (progn (menu-tabuleiro)
    (let ((option (read)))
      (cond 
       ((eq option '0) (funcall menu))
       ((not (numberp option))
        (progn 
          (format t "Insira uma opção válida")
          (select-tabuleiro menu)
         ))
       (T (let ((lista-tabuleiros (ler-tabuleiros)))
            (cond
             ((eq option 0) (format t "Até à próxima!"))
             (t (if (or (> option (length lista-tabuleiros)(< option 0)))
                    (progn 
                      (format t "Insira uma opção válida")
                      (select-tabuleiro menu)
                    )
                 (list option (nth(1- option) lista-tabuleiros))
                )))))
       )))
)


(defun directory-resultados-file()
    (make-pathname :host "c" :directory '(:absolute "lisp") :name "resultados" :type "dat")
)


(defun escrever-ficheiro-resultados (sol)
  (let* ((tempo-inicial (car sol)) 
         (alg-solucao (car(cdr sol))) 
         (tempo-fim (car(cdr(cdr sol)))) 
         (alg (car(cdr(cdr(cdr sol)))))
         (moves (car(cdr(cdr(cdr(cdr(cdr sol))))))) 
         (goal (car(cdr(cdr(cdr(cdr(cdr sol))))))) 
         )
    (with-open-file (file (directory-resultados-file) :direction :output :if-exists :append :if-does-not-exist :create) 
      (progn 
        (format file "~%* ------------------------- *") 
        (format file "~%~t> Algoritmo escolhido: ~a " alg)  
        (format file "~%~t> Hora de Início: ~a:~a:~a" (car tempo-inicial) (car(cdr tempo-inicial)) (car(cdr(cdr tempo-inicial)))) 
        (format file "~%~t> Hora de Fim: ~a:~a:~a" (car tempo-fim) (car(cdr tempo-fim)) (car(cdr(cdr tempo-fim)))) 
        (format file "~%~t> Número de nós gerados: ~a" (+ (car(cdr alg-solucao)) (car(cdr(cdr alg-solucao))))) 
        (format file "~%~t> Número de nós expandidos: ~a" (car(cdr(cdr alg-solucao)))) 
        (format file "~%~t> Profundidade máxima: ~a" moves) 
        (format file "~%~t> Objetivo pretendido: ~a" goal) 
        (format file "~%~t> Penetrância: ~F" (penetrancia alg-solucao)) 
        (format file "~%~t> Pontos totais: ~a" (no-g (car alg-solucao))) 
        (display-jogadas (car alg-solucao) (car(cdr alg-solucao)) (car(cdr(cdr alg-solucao)))) 
        )) 
    )
  )
